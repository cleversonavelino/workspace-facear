<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Modular Perl in Red Hat Enterprise Linux 8</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/0PbBJUj2ZEw/" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="linux" scheme="searchisko:content:tags" /><category term="perl" scheme="searchisko:content:tags" /><category term="Red Hat Enterprise Linux" scheme="searchisko:content:tags" /><category term="RHEL8" scheme="searchisko:content:tags" /><category term="rpm package" scheme="searchisko:content:tags" /><category term="Yum" scheme="searchisko:content:tags" /><author><name>Petr Pisar</name></author><id>searchisko:content:id:jbossorg_blog-modular_perl_in_red_hat_enterprise_linux_8</id><updated>2019-05-16T07:00:52Z</updated><published>2019-05-16T07:00:52Z</published><content type="html">&lt;p&gt;&lt;a href="https://www.redhat.com/en/enterprise-linux-8"&gt;Red Hat Enterprise Linux 8&lt;/a&gt; comes with &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/installing_managing_and_removing_user_space_components/index#introduction-to-modules_using-appstream"&gt;modules as a packaging concept&lt;/a&gt; that allows system administrators to select the desired software version from multiple packaged versions. This article will show you how to manage Perl as a module.&lt;span id="more-596027"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Installing from a default stream&lt;/h2&gt; &lt;p&gt;Let&amp;#8217;s install Perl:&lt;/p&gt; &lt;pre&gt;# yum --allowerasing install perl Last metadata expiration check: 1:37:36 ago on Tue 07 May 2019 04:18:01 PM CEST. Dependencies resolved. ========================================================================================== Package Arch Version Repository Size ========================================================================================== Installing: perl x86_64 4:5.26.3-416.el8 rhel-8.0.z-appstream 72 k Installing dependencies: […] Transaction Summary ========================================================================================== Install 147 Packages Total download size: 21 M Installed size: 59 M Is this ok [y/N]: y […] perl-threads-shared-1.58-2.el8.x86_64 Complete!&lt;/pre&gt; &lt;p&gt;Next, check which Perl you have:&lt;/p&gt; &lt;pre&gt;$ perl -V:version version='5.26.3';&lt;/pre&gt; &lt;p&gt;You have 5.26.3 Perl version. This is the default version supported for the next 10 years and, if you are fine with it, you don&amp;#8217;t have to know anything about modules. But what if you want to try a different version?&lt;/p&gt; &lt;h2&gt;Discovering streams&lt;/h2&gt; &lt;p&gt;Let&amp;#8217;s find out what Perl modules are available using the &lt;code&gt;yum module list&lt;/code&gt; command:&lt;/p&gt; &lt;pre&gt;# yum module list Last metadata expiration check: 1:45:10 ago on Tue 07 May 2019 04:18:01 PM CEST. […] Name Stream Profiles Summary […] parfait 0.5 common Parfait Module perl 5.24 common [d], Practical Extraction and Report Languag minimal e perl 5.26 [d] common [d], Practical Extraction and Report Languag minimal e perl-App-cpanminus 1.7044 [d] common [d] Get, unpack, build and install CPAN mod ules perl-DBD-MySQL 4.046 [d] common [d] A MySQL interface for Perl perl-DBD-Pg 3.7 [d] common [d] A PostgreSQL interface for Perl perl-DBD-SQLite 1.58 [d] common [d] SQLite DBI driver perl-DBI 1.641 [d] common [d] A database access API for Perl perl-FCGI 0.78 [d] common [d] FastCGI Perl bindings perl-YAML 1.24 [d] common [d] Perl parser for YAML php 7.2 [d] common [d], PHP scripting language devel, minim al […] &lt;/pre&gt; &lt;p&gt;Here you can see a Perl module is available in versions 5.24 and 5.26. Those are called &lt;em&gt;streams&lt;/em&gt; in the modularity world, and they denote an independent variant, usually a different version, of the same software stack. The &lt;em&gt;[d]&lt;/em&gt; flag marks a default stream. That means if you do not explicitly enable a different stream, the default one will be used. That explains why yum installed Perl 5.26.3 and not some of the 5.24 micro versions.&lt;/p&gt; &lt;p&gt;Now suppose you have an old application that you are migrating from Red Hat Enterprise Linux 7, which was running in the &lt;em&gt;rh-perl524&lt;/em&gt; &lt;a href="https://www.redhat.com/en/resources/red-hat-software-collections"&gt;software collection&lt;/a&gt; environment, and you want to give it a try on Red Hat Enterprise Linux 8. Let&amp;#8217;s try Perl 5.24 on Red Hat Enterprise Linux 8.&lt;/p&gt; &lt;h2&gt;Enabling a Stream&lt;/h2&gt; &lt;p&gt;First, switch the Perl module to the 5.24 stream:&lt;/p&gt; &lt;pre&gt;# yum module enable perl:5.24 Last metadata expiration check: 2:03:16 ago on Tue 07 May 2019 04:18:01 PM CEST. Problems in request: Modular dependency problems with Defaults: Problem 1: conflicting requests - module freeradius:3.0:8000020190425181943:75ec4169-0.x86_64 requires module(perl:5.26), but none of the providers can be installed - module perl:5.26:820181219174508:9edba152-0.x86_64 conflicts with module(perl:5.24) provided by perl:5.24:820190207164249:ee766497-0.x86_64 - module perl:5.24:820190207164249:ee766497-0.x86_64 conflicts with module(perl:5.26) provided by perl:5.26:820181219174508:9edba152-0.x86_64 Problem 2: conflicting requests - module freeradius:3.0:820190131191847:fbe42456-0.x86_64 requires module(perl:5.26), but none of the providers can be installed - module perl:5.26:820181219174508:9edba152-0.x86_64 conflicts with module(perl:5.24) provided by perl:5.24:820190207164249:ee766497-0.x86_64 - module perl:5.24:820190207164249:ee766497-0.x86_64 conflicts with module(perl:5.26) provided by perl:5.26:820181219174508:9edba152-0.x86_64 Dependencies resolved. ========================================================================================== Package Arch Version Repository Size ========================================================================================== Enabling module streams: perl 5.24 Transaction Summary ========================================================================================== Is this ok [y/N]: y Complete! Switching module streams does not alter installed packages (see 'module enable' in dnf(8) for details)&lt;/pre&gt; &lt;p&gt;Here you can see a warning that the &lt;em&gt;freeradius:3.0&lt;/em&gt; stream is not compatible with &lt;em&gt;perl:5.24&lt;/em&gt;. That&amp;#8217;s because FreeRADIUS was built for Perl 5.26 only. Not all modules are compatible with all other modules.&lt;/p&gt; &lt;p&gt;Next, you can see a confirmation for enabling the Perl 5.24 stream. And, finally, there is another warning about installed packages. The last warning means that the system still can have installed RPM packages from the 5.26 stream, and you need to explicitly sort it out.&lt;/p&gt; &lt;p&gt;Changing modules and changing packages are two separate phases. You can fix it by synchronizing a distribution content like this:&lt;/p&gt; &lt;pre&gt;# yum --allowerasing distrosync Last metadata expiration check: 0:00:56 ago on Tue 07 May 2019 06:33:36 PM CEST. Modular dependency problems: Problem 1: module freeradius:3.0:8000020190425181943:75ec4169-0.x86_64 requires module(perl:5.26), but none of the providers can be installed - module perl:5.26:820181219174508:9edba152-0.x86_64 conflicts with module(perl:5.24) provided by perl:5.24:820190207164249:ee766497-0.x86_64 - module perl:5.24:820190207164249:ee766497-0.x86_64 conflicts with module(perl:5.26) provided by perl:5.26:820181219174508:9edba152-0.x86_64 - conflicting requests Problem 2: module freeradius:3.0:820190131191847:fbe42456-0.x86_64 requires module(perl:5.26), but none of the providers can be installed - module perl:5.26:820181219174508:9edba152-0.x86_64 conflicts with module(perl:5.24) provided by perl:5.24:820190207164249:ee766497-0.x86_64 - module perl:5.24:820190207164249:ee766497-0.x86_64 conflicts with module(perl:5.26) provided by perl:5.26:820181219174508:9edba152-0.x86_64 - conflicting requests Dependencies resolved. ========================================================================================== Package Arch Version Repository Size ========================================================================================== […] Downgrading: perl x86_64 4:5.24.4-403.module+el8+2770+c759b41a rhel-8.0.z-appstream 6.1 M […] Transaction Summary ========================================================================================== Upgrade 69 Packages Downgrade 66 Packages Total download size: 20 M Is this ok [y/N]: y […] Complete!&lt;/pre&gt; &lt;p&gt;And try the &lt;code&gt;perl&lt;/code&gt; command again:&lt;/p&gt; &lt;pre&gt;$ perl -V:version version='5.24.4';&lt;/pre&gt; &lt;p&gt;Great! It works. We switched to a different Perl version, and the different Perl is still invoked with the &lt;code&gt;perl&lt;/code&gt; command and is installed to a standard path (&lt;em&gt;/usr/bin/perl&lt;/em&gt;). No &lt;code&gt;scl enable&lt;/code&gt; incantation is needed, in contrast to the software collections.&lt;/p&gt; &lt;p&gt;You could notice the repeated warning about FreeRADIUS. A future YUM update is going to clean up the unnecessary warning. Despite that, I can show you that other Perl-ish modules are compatible with any Perl stream.&lt;/p&gt; &lt;h2&gt;Dependent modules&lt;/h2&gt; &lt;p&gt;Let&amp;#8217;s say the old application mentioned before is using &lt;em&gt;DBD::SQLite&lt;/em&gt; Perl module. (This nomenclature is a little ambiguous: Red Hat Enterprise Linux has modules; Perl has modules. If I want to emphasize the difference, I will say the Modularity modules or the CPAN modules.) So, let&amp;#8217;s install CPAN&amp;#8217;s DBD::SQLite module. Yum can search in a packaged CPAN module, so give a try:&lt;/p&gt; &lt;pre&gt;# yum --allowerasing install 'perl(DBD::SQLite)' […] Dependencies resolved. ========================================================================================== Package Arch Version Repository Size ========================================================================================== Installing: perl-DBD-SQLite x86_64 1.58-1.module+el8+2519+e351b2a7 rhel-8.0.z-appstream 186 k Installing dependencies: perl-DBI x86_64 1.641-2.module+el8+2701+78cee6b5 rhel-8.0.z-appstream 739 k Enabling module streams: perl-DBD-SQLite 1.58 perl-DBI 1.641 Transaction Summary ========================================================================================== Install 2 Packages Total download size: 924 k Installed size: 2.3 M Is this ok [y/N]: y […] Installed: perl-DBD-SQLite-1.58-1.module+el8+2519+e351b2a7.x86_64 perl-DBI-1.641-2.module+el8+2701+78cee6b5.x86_64 Complete!&lt;/pre&gt; &lt;p&gt;Here you can see DBD::SQLite CPAN module was found in the &lt;em&gt;perl-DBD-SQLite&lt;/em&gt; RPM package that&amp;#8217;s part of &lt;em&gt;perl-DBD-SQLite:1.58&lt;/em&gt; module, and apparently it requires some dependencies from the &lt;em&gt;perl-DBI:1.641&lt;/em&gt; module, too. Thus, yum asked for enabling the streams and installing the packages.&lt;/p&gt; &lt;p&gt;Before playing with DBD::SQLite under Perl 5.24, take a look at the listing of the Modularity modules and compare it with what you saw the first time:&lt;/p&gt; &lt;pre&gt;# yum module list […] parfait 0.5 common Parfait Module perl 5.24 [e] common [d], Practical Extraction and Report Languag minimal e perl 5.26 [d] common [d], Practical Extraction and Report Languag minimal e perl-App-cpanminus 1.7044 [d] common [d] Get, unpack, build and install CPAN mod ules perl-DBD-MySQL 4.046 [d] common [d] A MySQL interface for Perl perl-DBD-Pg 3.7 [d] common [d] A PostgreSQL interface for Perl perl-DBD-SQLite 1.58 [d][e] common [d] SQLite DBI driver perl-DBI 1.641 [d][e] common [d] A database access API for Perl perl-FCGI 0.78 [d] common [d] FastCGI Perl bindings perl-YAML 1.24 [d] common [d] Perl parser for YAML php 7.2 [d] common [d], PHP scripting language devel, minim al […] &lt;/pre&gt; &lt;p&gt;Notice that perl:5.24 is enabled (&lt;em&gt;[e]&lt;/em&gt;) and thus takes precedence over perl:5.26, which would otherwise be a default one (&lt;em&gt;[d]&lt;/em&gt;). Other enabled Modularity modules are perl-DBD-SQLite:1.58 and perl-DBI:1.641. Those are were enabled when you installed DBD::SQLite. These two modules have no other streams.&lt;/p&gt; &lt;p&gt;In general, any module can have multiple streams. At most, one stream of a module can be the default one. And, at most, one stream of a module can be enabled. An enabled stream takes precedence over a default one. If there is no enabled or a default stream, content of the module is unavailable.&lt;/p&gt; &lt;p&gt;If, for some reason, you need to disable a stream, even a default one, you do that with &lt;code&gt;yum module disable &lt;var&gt;MODULE:STREAM&lt;/var&gt;&lt;/code&gt; command.&lt;/p&gt; &lt;p&gt;Enough theory, back to some productive work. You are ready to test the DBD::SQLite CPAN module now. Let&amp;#8217;s create a &lt;em&gt;test&lt;/em&gt; database, a &lt;em&gt;foo&lt;/em&gt; table inside with one textual column called &lt;em&gt;bar&lt;/em&gt;, and let&amp;#8217;s store a row with &lt;em&gt;Hello&lt;/em&gt; text there:&lt;/p&gt; &lt;pre&gt;$ perl -MDBI -e '$dbh=DBI-&amp;#62;connect(q{dbi:SQLite:dbname=test}); $dbh-&amp;#62;do(q{CREATE TABLE foo (bar text)}); $sth=$dbh-&amp;#62;prepare(q{INSERT INTO foo(bar) VALUES(?)}); $sth-&amp;#62;execute(q{Hello})'&lt;/pre&gt; &lt;p&gt;Next, verify the &lt;em&gt;Hello&lt;/em&gt; string was indeed stored by querying the database:&lt;/p&gt; &lt;pre&gt;$ perl -MDBI -e '$dbh=DBI-&amp;#62;connect(q{dbi:SQLite:dbname=test}); print $dbh-&amp;#62;selectrow_array(q{SELECT bar FROM foo}), qq{\n}' Hello&lt;/pre&gt; &lt;p&gt;It seems DBD::SQLite works.&lt;/p&gt; &lt;h2&gt;Non-modular packages may not work with non-default streams&lt;/h2&gt; &lt;p&gt;So far, everything is great and working. Now I will show what happens if you try to install an RPM package that has not been modularized and is thus compatible only with the default Perl, perl:5.26:&lt;/p&gt; &lt;pre&gt;# yum --allowerasing install 'perl(LWP)' […] Error: Problem: package perl-libwww-perl-6.34-1.el8.noarch requires perl(:MODULE_COMPAT_5.26.2), but none of the providers can be installed - cannot install the best candidate for the job - package perl-libs-4:5.26.3-416.el8.i686 is excluded - package perl-libs-4:5.26.3-416.el8.x86_64 is excluded (try to add '--skip-broken' to skip uninstallable packages or '--nobest' to use not only best candidate packages)&lt;/pre&gt; &lt;p&gt;Yum will report an error about &lt;em&gt;perl-libwww-perl&lt;/em&gt; RPM package being incompatible. The &lt;em&gt;LWP&lt;/em&gt; CPAN module that is packaged as perl-libwww-perl is built only for Perl 5.26, and therefore RPM dependencies cannot be satisfied. When a perl:5.24 stream is enabled, the packages from perl:5.26 stream are masked and become unavailable. However, this masking does not apply to non-modular packages, like perl-libwww-perl. There are plenty of packages that were not modularized yet. If you need some of them to be available and compatible with a non-default stream (e.g., not only with perl:5.26 but also with perl:5.24) do not hesitate to contact &lt;a href="https://access.redhat.com/support"&gt;Red Hat support team&lt;/a&gt; with your request.&lt;/p&gt; &lt;h2&gt;Resetting a module&lt;/h2&gt; &lt;p&gt;Let&amp;#8217;s say you tested your old application and now you want to find out if it works with the new Perl 5.26.&lt;/p&gt; &lt;p&gt;To do that, you need to switch back to the perl:5.26 stream. Unfortunately, switching from an enabled stream back to a default or to a yet another non-default stream is not straightforward. You&amp;#8217;ll need to perform a module reset:&lt;/p&gt; &lt;pre&gt;# yum module reset perl […] Dependencies resolved. ========================================================================================== Package Arch Version Repository Size ========================================================================================== Resetting module streams: perl 5.24 Transaction Summary ========================================================================================== Is this ok [y/N]: y Complete!&lt;/pre&gt; &lt;p&gt;Well, that did not hurt. Now you can synchronize the distribution again to replace the 5.24 RPM packages with 5.26 ones:&lt;/p&gt; &lt;pre&gt;# yum --allowerasing distrosync […] Transaction Summary ========================================================================================== Upgrade 65 Packages Downgrade 71 Packages Total download size: 22 M Is this ok [y/N]: y […]&lt;/pre&gt; &lt;p&gt;After that, you can check the Perl version:&lt;/p&gt; &lt;pre&gt;$ perl -V:version version='5.26.3';&lt;/pre&gt; &lt;p&gt;And, check the enabled modules:&lt;/p&gt; &lt;pre&gt;# yum module list […] parfait 0.5 common Parfait Module perl 5.24 common [d], Practical Extraction and Report Languag minimal e perl 5.26 [d] common [d], Practical Extraction and Report Languag minimal e perl-App-cpanminus 1.7044 [d] common [d] Get, unpack, build and install CPAN mod ules perl-DBD-MySQL 4.046 [d] common [d] A MySQL interface for Perl perl-DBD-Pg 3.7 [d] common [d] A PostgreSQL interface for Perl perl-DBD-SQLite 1.58 [d][e] common [d] SQLite DBI driver perl-DBI 1.641 [d][e] common [d] A database access API for Perl perl-FCGI 0.78 [d] common [d] FastCGI Perl bindings perl-YAML 1.24 [d] common [d] Perl parser for YAML php 7.2 [d] common [d], PHP scripting language devel, minim al […] &lt;/pre&gt; &lt;p&gt;As you can see, we are back at the square one. The perl:5.24 stream is not enabled, and perl:5.26 is the default and therefore preferred. Only perl-DBD-SQLite:1.58 and perl-DBI:1.641 streams remained enabled. It does not matter much because those are the only streams. Nonetheless, you can reset them back using &lt;code&gt;yum module reset perl-DBI perl-DBD-SQLite&lt;/code&gt; if you like.&lt;/p&gt; &lt;h2&gt;Multi-context streams&lt;/h2&gt; &lt;p&gt;What happened with the DBD::SQLite? It&amp;#8217;s still there and working:&lt;/p&gt; &lt;pre&gt;$ perl -MDBI -e '$dbh=DBI-&amp;#62;connect(q{dbi:SQLite:dbname=test}); print $dbh-&amp;#62;selectrow_array(q{SELECT bar FROM foo}), qq{\n}' Hello&lt;/pre&gt; &lt;p&gt;That is possible because the perl-DBD-SQLite module is built for both 5.24 and 5.26 Perls. We call these modules &lt;em&gt;multi-contextual&lt;/em&gt;. That&amp;#8217;s the case for perl-DBD-SQLite or perl-DBI, but not the case for FreeRADIUS, which explains the warning you saw earlier. If you want to see these low-level details, such which contexts are available, which dependencies are required, or which packages are contained in a module, you can use the &lt;code&gt;yum module info &lt;var&gt;MODULE:STREAM&lt;/var&gt;&lt;/code&gt; command.&lt;/p&gt; &lt;h2&gt;Afterword&lt;/h2&gt; &lt;p&gt;I hope this tutorial shed some light on modules—the fresh feature of Red Hat Enterprise Linux 8 that enables us to provide you with multiple versions of software on top of one Linux platform. If you need more details, please read &lt;a href="https://developers.redhat.com/rhel8/"&gt;documentation accompanying the product&lt;/a&gt; (namely, user-space component management document and &lt;a href="http://man7.org/linux/man-pages/man8/yum.8.html"&gt;yum(8) manual page&lt;/a&gt;) or ask the support team for help.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F16%2Fmodular-perl-in-red-hat-enterprise-linux-8%2F&amp;#38;linkname=Modular%20Perl%20in%20Red%20Hat%20Enterprise%20Linux%C2%A08" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F16%2Fmodular-perl-in-red-hat-enterprise-linux-8%2F&amp;#38;linkname=Modular%20Perl%20in%20Red%20Hat%20Enterprise%20Linux%C2%A08" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F16%2Fmodular-perl-in-red-hat-enterprise-linux-8%2F&amp;#38;linkname=Modular%20Perl%20in%20Red%20Hat%20Enterprise%20Linux%C2%A08" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F16%2Fmodular-perl-in-red-hat-enterprise-linux-8%2F&amp;#38;linkname=Modular%20Perl%20in%20Red%20Hat%20Enterprise%20Linux%C2%A08" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F16%2Fmodular-perl-in-red-hat-enterprise-linux-8%2F&amp;#38;linkname=Modular%20Perl%20in%20Red%20Hat%20Enterprise%20Linux%C2%A08" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F16%2Fmodular-perl-in-red-hat-enterprise-linux-8%2F&amp;#38;linkname=Modular%20Perl%20in%20Red%20Hat%20Enterprise%20Linux%C2%A08" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F16%2Fmodular-perl-in-red-hat-enterprise-linux-8%2F&amp;#38;linkname=Modular%20Perl%20in%20Red%20Hat%20Enterprise%20Linux%C2%A08" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F16%2Fmodular-perl-in-red-hat-enterprise-linux-8%2F&amp;#38;linkname=Modular%20Perl%20in%20Red%20Hat%20Enterprise%20Linux%C2%A08" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F16%2Fmodular-perl-in-red-hat-enterprise-linux-8%2F&amp;#038;title=Modular%20Perl%20in%20Red%20Hat%20Enterprise%20Linux%C2%A08" data-a2a-url="https://developers.redhat.com/blog/2019/05/16/modular-perl-in-red-hat-enterprise-linux-8/" data-a2a-title="Modular Perl in Red Hat Enterprise Linux 8"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/05/16/modular-perl-in-red-hat-enterprise-linux-8/"&gt;Modular Perl in Red Hat Enterprise Linux 8&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/0PbBJUj2ZEw" height="1" width="1" alt=""/&gt;</content><summary>Red Hat Enterprise Linux 8 comes with modules as a packaging concept that allows system administrators to select the desired software version from multiple packaged versions. This article will show you how to manage Perl as a module. Installing from a default stream Let’s install Perl: # yum --allowerasing install perl Last metadata expiration check: 1:37:36 ago on Tue 07 May 2019 04:18:01 PM CEST...</summary><dc:creator>Petr Pisar</dc:creator><dc:date>2019-05-16T07:00:52Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/05/16/modular-perl-in-red-hat-enterprise-linux-8/</feedburner:origLink></entry><entry><title>How To Setup Integration Tooling for CodeReady Studio 12</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/UMZpmhpUqGE/how-to-setup-integration-tooling-for-codeready-studio-12.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="CodeReadyStudio" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="FUSE" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="JBossAMQ" scheme="searchisko:content:tags" /><category term="JBossDevStudio" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-how_to_setup_integration_tooling_for_codeready_studio_12</id><updated>2019-05-16T13:53:44Z</updated><published>2019-05-16T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://2.bp.blogspot.com/-cIzb4fcReRw/XNwFlq25WXI/AAAAAAAAtqM/yPVnqcs3QXAmfg8cEEprq8kHtSkcQ2PAgCLcBGAs/s1600/codereadystudio.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img alt="codeready studio" border="0" data-original-height="572" data-original-width="894" height="204" src="https://2.bp.blogspot.com/-cIzb4fcReRw/XNwFlq25WXI/AAAAAAAAtqM/yPVnqcs3QXAmfg8cEEprq8kHtSkcQ2PAgCLcBGAs/s320/codereadystudio.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;The release of the latest Red Hat developer suite version 12 brings with it a name change from Red Hat JBoss Developer Studio to Red Hat CodeReady Studio.&lt;br /&gt;&lt;br /&gt;The focus here is not on the Red Hat CodeReady Workspaces, a cloud and container development experience, but on the locally installed developers studio.&lt;br /&gt;&lt;br /&gt;The new release brings with it the questions around how to get started with the various Red Hat integration, data, and process automation product tool sets that are not installed out of the box.&lt;br /&gt;&lt;br /&gt;This series of articles continues to showcase how to install each set of tools and explains the products they are supporting. The hope is that an easy getting started experience helps you make informed decisions about the tooling you might want to use on your next development project.&lt;br /&gt;&lt;br /&gt;There are three different software packs that offer tooling for various Red Hat middleware technologies:&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;i&gt;&lt;b&gt;&lt;a href="https://www.schabell.org/2019/05/how-to-setup-integration-tooling-for-codeready-studio-12.html" target="_blank"&gt;Red Hat Integration Development&lt;/a&gt;&lt;/b&gt;&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Red Hat Process Automation Development&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Red Hat Data Virtualization Development&lt;/i&gt;&lt;/li&gt;&lt;/ol&gt;This article will outline how to get started with the &lt;i&gt;Red Hat Integration&amp;nbsp;&lt;/i&gt;tooling with any of the CodeReady Studio version 12 releases.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: right; margin-left: 1em; text-align: right;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-_Xjk5eintLw/XNwLjnHoA_I/AAAAAAAAtqY/MChzfpJXQFUWXh4R7OkYB1-hsJRWKUxBgCLcBGAs/s1600/Screenshot%2B2019-05-15%2Bat%2B14.49.36.png" imageanchor="1" style="clear: right; margin-bottom: 1em; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="codeready studio" border="0" data-original-height="597" data-original-width="1600" height="119" src="https://3.bp.blogspot.com/-_Xjk5eintLw/XNwLjnHoA_I/AAAAAAAAtqY/MChzfpJXQFUWXh4R7OkYB1-hsJRWKUxBgCLcBGAs/s320/Screenshot%2B2019-05-15%2Bat%2B14.49.36.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Overview of the development add-on tooling.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;Installation&lt;/h3&gt;Red Hat CodeReady Studio can be obtained through the &lt;a href="https://access.redhat.com/jbossnetwork/restricted/listSoftware.html" target="_blank"&gt;Customer Portal&lt;/a&gt;&amp;nbsp;(login required) or via the &lt;a href="https://developers.redhat.com/products/devstudio/download/" target="_blank"&gt;early access downloads on developers.redhat.com&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;After installation, start it up and you will see a welcoming &lt;i&gt;Red Hat Central&lt;/i&gt; tab with at the bottom a tab to look at the available tool sets labeled &lt;i&gt;Software/Update&lt;/i&gt;.&lt;br /&gt;&lt;br /&gt;&lt;table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: right; text-align: right;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-sR1EVUBe4AM/XNwPM0mAGsI/AAAAAAAAtqk/PD3Fx2ik864_LpfCRsitUMxLHx3UK_hfwCLcBGAs/s1600/Screenshot%2B2019-05-15%2Bat%2B14.55.13.png" imageanchor="1" style="clear: right; margin-bottom: 1em; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="codeready studio" border="0" data-original-height="831" data-original-width="1600" height="166" src="https://4.bp.blogspot.com/-sR1EVUBe4AM/XNwPM0mAGsI/AAAAAAAAtqk/PD3Fx2ik864_LpfCRsitUMxLHx3UK_hfwCLcBGAs/s320/Screenshot%2B2019-05-15%2Bat%2B14.55.13.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Selecting integration tooling add-on.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;You will notice at the time of this writing that there are several options you can install found on the &lt;i&gt;Software/Update&lt;/i&gt; tab. Selecting the &lt;i&gt;Software/Update &lt;/i&gt;tab at the bottom reveals the Red Hat&amp;nbsp;&lt;i&gt;Development&amp;nbsp;&lt;/i&gt;tooling add-ons. Let's select &lt;i&gt;JBoss Fuse Development&lt;/i&gt;&amp;nbsp;check box.&lt;br /&gt;&lt;br /&gt;Note that if you previously installed any of these tooling add-ons, your list of options shall not include them all.&lt;br /&gt;&lt;br /&gt;Clicking on the&amp;nbsp;&lt;i&gt;Install/Update&lt;/i&gt;&amp;nbsp;button&amp;nbsp;starts the add-on installation and restarting the CodeReady Studio at the end completes the process.&lt;br /&gt;&lt;br /&gt;If you are interested in what is being installed, it can be examined by examining the pop-up listing of components and versions. Note this will change as the early access progresses towards final releases.&lt;br /&gt;&lt;br /&gt;&lt;div style="text-align: right;"&gt;&lt;/div&gt;&lt;table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: right; margin-left: 1em; text-align: right;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-M6BNQJZxPaM/XNwPuPSL0uI/AAAAAAAAtqs/oalOrr80dr8hfsh2sBkSjHwVj39sUyM1gCLcBGAs/s1600/Screenshot%2B2019-05-15%2Bat%2B15.02.13.png" imageanchor="1" style="clear: right; margin-bottom: 1em; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="codeready studio" border="0" data-original-height="900" data-original-width="1594" height="180" src="https://4.bp.blogspot.com/-M6BNQJZxPaM/XNwPuPSL0uI/AAAAAAAAtqs/oalOrr80dr8hfsh2sBkSjHwVj39sUyM1gCLcBGAs/s320/Screenshot%2B2019-05-15%2Bat%2B15.02.13.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Installing components.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;Stay tuned for more articles in this series that will detail the installation of the remaining development add-on tooling.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Other options&lt;/h3&gt;See below for any development tooling needs on previous versions of the studio:&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;How To Setup Process Automation Tooling for CodeReady Studio 12 (coming soon...)&lt;/li&gt;&lt;li&gt;How To Setup Data Virtualization Tooling for CodeReady Studio 12 (coming soon...)&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2019/05/how-to-setup-integration-tooling-for-codeready-studio-12.html" target="_blank"&gt;&lt;span style="color: blue;"&gt;How To Setup Integration Tooling for CodeReady Studio 12&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2017/09/howto-setup-fuse-tooling-for-jbds11.html" target="_blank"&gt;&lt;span style="color: blue;"&gt;How To Setup Fuse Tooling For JBoss Developer Studio 11&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2017/09/howto-setup-bpm-and-rules-tooling-for-jbds11.html" target="_blank"&gt;&lt;span style="color: blue;"&gt;How To Setup BPM and Rules Tooling For JBoss Developer Studio 11&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2017/09/howto-setup-fuse-tooling-for-jbds11.html" target="_blank"&gt;&lt;span style="color: blue;"&gt;How To Setup Integration and SOA Tooling For JBoss Developer Studio 11&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2016/10/howto-setup-fuse-tooling-for-jbds10.html" target="_blank"&gt;&lt;span style="color: blue;"&gt;How To Setup Fuse Tooling For JBoss Developer Studio 10&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2016/10/howto-setup-bpm-and-rules-tooling-for-jbds10.html" target="_blank"&gt;&lt;span style="color: blue;"&gt;How To Setup BPM and Rules Tooling For JBoss Developer Studio 10&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2016/10/howto-setup-data-virtualization-tooling-for-jbds10.html" target="_blank"&gt;&lt;span style="color: blue;"&gt;How To Setup Data Virtualization Tooling For JBoss Developer Studio 10&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2016/11/howto-setup-integration-soa-tooling-for-jbds10.html" target="_blank"&gt;&lt;span style="color: blue;"&gt;How To Setup Integration and SOA Tooling For JBoss Developer Studio 10&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2015/10/how-to-setup-fuse-tooling-for-jbds9.html" target="_blank"&gt;&lt;span style="color: blue;"&gt;How To Setup Fuse Tooling For JBoss Developer Studio 9&amp;nbsp;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2015/10/how-to-setup-bpm-and-rules-tooling-for-jbds9.html" target="_blank"&gt;&lt;span style="color: blue;"&gt;How To Setup&amp;nbsp;BPM&amp;nbsp;and Rules Tooling For&amp;nbsp;JBoss&amp;nbsp;Developer Studio 9&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2015/10/how-to-setup-soa5-tooling-for-jbds919.html" target="_blank"&gt;&lt;span style="color: blue;"&gt;How To Setup Big Data Tooling For&amp;nbsp;JBoss&amp;nbsp;Developer Studio 9&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2015/10/how-to-setup-soa5-tooling-for-jbds9.html" target="_blank"&gt;&lt;span style="color: blue;"&gt;How To Setup SOA 5.x Tooling For JBoss Developer Studio 9&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2015/10/how-to-setup-integration-and-soa-tooling-for-jbds9.html" target="_blank"&gt;&lt;span style="color: blue;"&gt;How To Setup Integration &amp;amp; SOA Tooling For JBoss Developer Studio 9&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2014/11/how-to-setup-bpm-and-rules-tooling-for-jbds8.html" target="_blank"&gt;&lt;span style="color: blue;"&gt;How To Setup BPM and Rules Tooling For JBoss Developer Studio 8&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2014/11/how-to-setup-big-data-tooling-for-jbds8.html" target="_blank"&gt;&lt;span style="color: blue;"&gt;How To Setup Big Data Tooling For JBoss Developer Studio 8&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2014/11/how-to-setup-integration-and-soa-tooling-for-jbds8.html" target="_blank"&gt;&lt;span style="color: blue;"&gt;How To Setup Integration &amp;amp; SOA Tooling For JBoss Developer Studio 8&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2014/11/how-to-setup-soa5-tooling-for-jbds8.html" target="_blank"&gt;&lt;span style="color: blue;"&gt;How To Setup SOA 5.x Tooling For JBoss Developer Studio 8&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2013/04/jboss-developer-studio-7-how-to-setup.html" target="_blank"&gt;&lt;span style="color: blue;"&gt;JBoss Developer Studio 7 - how to setup SOA Tools (BRMS example)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2013/04/jboss-developer-studio-6-how-to-setup.html" target="_blank"&gt;&lt;span style="color: blue;"&gt;JBoss Developer Studio 6 - how to setup SOA Tools (BRMS example)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2013/01/jbds-bpmn2-modeler-howto-install.html" target="_blank"&gt;&lt;span style="color: blue;"&gt;JBoss Developer Studio 5 - how to add Eclipse BPMN2 Modeler as jBPM designer&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2012/05/jboss-developer-studio-5-how-to-setup.html" target="_blank"&gt;&lt;span style="color: blue;"&gt;JBoss Developer Studio 5 - how to setup SOA Tools (BRMS example)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2011/03/jboss-developer-studio-40-how-to-add_23.html" target="_blank"&gt;&lt;span style="color: blue;"&gt;JBoss Developer Studio 4.0 - how to add native BPMN2 editor&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2011/03/jboss-developer-studio-40-how-to-add.html" target="_blank"&gt;&lt;span style="color: blue;"&gt;JBoss Developer Studio 4.0 - how to add native BPMN editor / Enterprise Architect Savara tooling&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2011/02/jboss-developer-studio-40-how-to-add.html" target="_blank"&gt;&lt;span style="color: blue;"&gt;JBoss Developer Studio 4.0 - how to add tech preview BPEL tooling&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;span style="color: blue;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=Fj7HyFnW81Q:_nImSFdkXxc:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=Fj7HyFnW81Q:_nImSFdkXxc:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=Fj7HyFnW81Q:_nImSFdkXxc:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=Fj7HyFnW81Q:_nImSFdkXxc:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=Fj7HyFnW81Q:_nImSFdkXxc:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=Fj7HyFnW81Q:_nImSFdkXxc:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=Fj7HyFnW81Q:_nImSFdkXxc:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=Fj7HyFnW81Q:_nImSFdkXxc:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=Fj7HyFnW81Q:_nImSFdkXxc:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=Fj7HyFnW81Q:_nImSFdkXxc:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=Fj7HyFnW81Q:_nImSFdkXxc:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/Fj7HyFnW81Q" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/UMZpmhpUqGE" height="1" width="1" alt=""/&gt;</content><summary>The release of the latest Red Hat developer suite version 12 brings with it a name change from Red Hat JBoss Developer Studio to Red Hat CodeReady Studio. The focus here is not on the Red Hat CodeReady Workspaces, a cloud and container development experience, but on the locally installed developers studio. The new release brings with it the questions around how to get started with the various Red ...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2019-05-16T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/Fj7HyFnW81Q/how-to-setup-integration-tooling-for-codeready-studio-12.html</feedburner:origLink></entry><entry><title>2 tips to make your C++ projects compile 3 times faster</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/V_Ti7m6WPj8/" /><category term="C++" scheme="searchisko:content:tags" /><category term="c/c++" scheme="searchisko:content:tags" /><category term="Clang/LLVM" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="Developer Tools" scheme="searchisko:content:tags" /><category term="docker" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="performance" scheme="searchisko:content:tags" /><category term="Programming Languages" scheme="searchisko:content:tags" /><author><name>Konrad Kleine</name></author><id>searchisko:content:id:jbossorg_blog-2_tips_to_make_your_c_projects_compile_3_times_faster</id><updated>2019-05-15T10:00:23Z</updated><published>2019-05-15T10:00:23Z</published><content type="html">&lt;p&gt;In this article, I will demonstrate how to speed up your compilation times by distributing compilation load using a distcc server container.  Specifically, I&amp;#8217;ll show how to set up and use containers running a &lt;a class="markup--anchor markup--p-anchor" href="https://distcc.github.io/" target="_blank" rel="noopener nofollow noreferrer" data-href="https://distcc.github.io/"&gt;distcc&lt;/a&gt; server to distribute the compilation load over a heterogeneous cluster of nodes (development laptop, old desktop PC, and a Mac). To improve the speed of recompilation, I will use &lt;a class="markup--anchor markup--p-anchor" href="https://ccache.dev/" target="_blank" rel="noopener nofollow noreferrer" data-href="https://ccache.dev/"&gt;ccache&lt;/a&gt;.&lt;br /&gt; &lt;span id="more-595307"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;What to expect&lt;/h2&gt; &lt;p&gt;Today, you can find a lot articles about Kubernetes or OpenShift. This is not such an article. I &lt;a class="markup--anchor markup--p-anchor" href="https://developers.redhat.com/blog/2017/06/05/why-i-started-using-containers/" target="_blank" rel="noopener nofollow noreferrer" data-href="https://developers.redhat.com/blog/2017/06/05/why-i-started-using-containers/"&gt;started using containers&lt;/a&gt;, especially Docker, back in 2013, and in the beginning, I mainly used them to isolate things and have reproducible builds. The same is true here; we&amp;#8217;ll build a container, push it to &lt;a class="markup--anchor markup--p-anchor" href="https://hub.docker.com/" target="_blank" rel="noopener nofollow noreferrer" data-href="https://hub.docker.com/"&gt;DockerHub&lt;/a&gt; for distribution, and download it on other machines on the fly when running &lt;code class="markup--code markup--p-code"&gt;docker run ...&lt;/code&gt; so don’t expect crazy things to happen here.&lt;/p&gt; &lt;p&gt;In fact, even if you don’t have any prior knowledge of Docker, you should still be able to follow along. Getting and installing the Docker Engine in the Community Version (on Linux) or the Docker Desktop (on macOS and Windows) is completely enough.&lt;/p&gt; &lt;p&gt;In terms of &lt;a href="https://developers.redhat.com/topics/c/"&gt;C++&lt;/a&gt;, I don’t expect anything code-wise except that your project uses &lt;a class="markup--anchor markup--p-anchor" href="https://cmake.org" target="_blank" rel="nofollow noopener noreferrer" data-href="https://cmake.org"&gt;CMake&lt;/a&gt; and compiles with &lt;a class="markup--anchor markup--p-anchor" href="https://www.gnu.org/software/gcc/" target="_blank" rel="nofollow noopener noreferrer" data-href="https://www.gnu.org/software/gcc/"&gt;GCC&lt;/a&gt; or &lt;a class="markup--anchor markup--p-anchor" href="https://clang.llvm.org/" target="_blank" rel="nofollow noopener noreferrer" data-href="https://clang.llvm.org/"&gt;Clang&lt;/a&gt;.&lt;/p&gt; &lt;h2 id="bcf9" class="graf graf--h3 graf--hasDropCapModel graf--leading"&gt;Introduction&lt;/h2&gt; &lt;p id="921c" class="graf graf--p graf-after--h3"&gt;I recently started a new job at Red Hat where I get the chance to work on the &lt;a class="markup--anchor markup--p-anchor" href="https://lldb.llvm.org/" target="_blank" rel="noopener nofollow noreferrer" data-href="https://lldb.llvm.org/"&gt;LLDB&lt;/a&gt; project. The first thing I noticed, after not having worked with C++ for quite a while, was the &lt;em class="markup--em markup--p-em"&gt;slowness&lt;/em&gt; of compilation. I worked with &lt;a class="markup--anchor markup--p-anchor" href="https://golang.org/" target="_blank" rel="noopener nofollow noreferrer" data-href="https://golang.org/"&gt;Go&lt;/a&gt; for a couple of years, and compilation performance isn’t an issue there at all. It simply vanishes from the picture.&lt;/p&gt; &lt;h3&gt;Slow compilation&lt;/h3&gt; &lt;p&gt;When I say that compilation was slow for &lt;a class="markup--anchor markup--p-anchor" href="https://lldb.llvm.org/" target="_blank" rel="nofollow noopener noreferrer" data-href="https://lldb.llvm.org/"&gt;LLDB,&lt;/a&gt; I mean that compiling the &lt;code class="markup--code markup--p-code"&gt;lldb&lt;/code&gt; target (git tag: llvmorg-7.1.0) in release mode takes close to two hours. Release builds are already the fastest to build and given that I need to build a total of 7 or more variants of LLDB (&lt;a class="markup--anchor markup--p-anchor" href="https://clang.llvm.org/" target="_blank" rel="nofollow noopener noreferrer" data-href="https://clang.llvm.org/"&gt;clang&lt;/a&gt;/&lt;a class="markup--anchor markup--p-anchor" href="https://www.gnu.org/software/gcc/" target="_blank" rel="nofollow noopener noreferrer" data-href="https://www.gnu.org/software/gcc/"&gt;gcc&lt;/a&gt;, debug/release, &lt;a class="markup--anchor markup--p-anchor" href="https://clang.llvm.org/docs/AddressSanitizer.html" target="_blank" rel="nofollow noopener noreferrer" data-href="https://clang.llvm.org/docs/AddressSanitizer.html"&gt;asan&lt;/a&gt;/no asan, assert/no assert, …) this makes compilation time take up a whole working day.&lt;/p&gt; &lt;p&gt;My normal developer system consists of a three-year-old &lt;a class="markup--anchor markup--p-anchor" href="https://www.lenovo.com/us/en/laptops/thinkpad/thinkpad-t-series/ThinkPad-T460s/p/22TP2TT460S" target="_blank" rel="nofollow noopener noreferrer" data-href="https://www.lenovo.com/us/en/laptops/thinkpad/thinkpad-t-series/ThinkPad-T460s/p/22TP2TT460S"&gt;Lenovo Thinkpad T460s&lt;/a&gt; laptop, on which I run &lt;a class="markup--anchor markup--p-anchor" href="https://getfedora.org/" target="_blank" rel="nofollow noopener noreferrer" data-href="https://getfedora.org/"&gt;Fedora 29&lt;/a&gt; and the following tools:&lt;/p&gt; &lt;ul class="postList"&gt; &lt;li id="a354" class="graf graf--li graf-after--p"&gt;&lt;strong class="markup--strong markup--li-strong"&gt;gcc&lt;/strong&gt; (GCC) 8.2.1 20180801 (Red Hat 8.2.1–2)&lt;/li&gt; &lt;li id="f377" class="graf graf--li graf-after--li"&gt;&lt;strong class="markup--strong markup--li-strong"&gt;clang&lt;/strong&gt; version 7.0.1 (Fedora 7.0.1–6.fc29)&lt;/li&gt; &lt;li id="50ac" class="graf graf--li graf-after--li"&gt;&lt;strong class="markup--strong markup--li-strong"&gt;ccache&lt;/strong&gt; version 3.4.2&lt;/li&gt; &lt;li id="fa5a" class="graf graf--li graf-after--li"&gt;&lt;strong class="markup--strong markup--li-strong"&gt;distcc&lt;/strong&gt; 3.2rc1 x86_64-redhat-linux-gnu&lt;/li&gt; &lt;/ul&gt; &lt;p id="7299" class="graf graf--p graf-after--li"&gt;When I compile LLDB on my development laptop using &lt;code class="markup--code markup--p-code"&gt;make&lt;/code&gt; and four compile jobs ( &lt;code class="markup--code markup--p-code"&gt;-j 4&lt;/code&gt; ), the &lt;code class="markup--code markup--p-code"&gt;time&lt;/code&gt; command reports this:&lt;/p&gt; &lt;pre id="089d" class="graf graf--pre graf-after--p"&gt;real 72m24,439s user 224m32,731s sys 12m2,094s&lt;/pre&gt; &lt;p id="1318" class="graf graf--p graf-after--pre"&gt;This means that I have to wait approximately two hours for a one-time compilation.&lt;/p&gt; &lt;h3&gt;Speeding up&lt;/h3&gt; &lt;p&gt;When I compile LLDB on my cluster (laptop, desktop, iMac) using &lt;code class="markup--code markup--p-code"&gt;ninja&lt;/code&gt; and 10 compile jobs (as determined by &lt;code class="markup--code markup--p-code"&gt;distcc -j&lt;/code&gt; ) the &lt;code class="markup--code markup--p-code"&gt;time&lt;/code&gt; command reports this:&lt;/p&gt; &lt;pre id="3f22" class="graf graf--pre graf-after--p"&gt;real 22m29,130s user 49m16,726s sys 4m27,407s&lt;/pre&gt; &lt;p id="54ae" class="graf graf--p graf-after--pre"&gt;That means compiling with ninja and my distcc cluster is&lt;/p&gt; &lt;ul class="postList"&gt; &lt;li id="8757" class="graf graf--li graf-after--p"&gt;&lt;strong class="markup--strong markup--li-strong"&gt;3.22 times faster&lt;/strong&gt; in real time.&lt;/li&gt; &lt;li id="0a82" class="graf graf--li graf-after--li"&gt;&lt;strong class="markup--strong markup--li-strong"&gt;4.56 times faster&lt;/strong&gt; in total number of CPU seconds that the process spent in user mode.&lt;/li&gt; &lt;li id="22bc" class="graf graf--li graf-after--li"&gt;&lt;strong class="markup--strong markup--li-strong"&gt;2.7 times faster&lt;/strong&gt; in number of CPU-seconds that the process spent in kernel mode.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;I hope this motivates you to continue reading.&lt;br /&gt; &lt;img class=" alignnone wp-image-595367 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/05/distcc-1024x152.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/05/distcc-1024x152.png" alt="" width="640" height="95" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/05/distcc-1024x152.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/distcc-300x45.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/distcc-768x114.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/p&gt; &lt;h2&gt;Tip #1: Distributing compilation load&lt;/h2&gt; &lt;p&gt;I have experimented before with ways to speed up compilation using &lt;a class="markup--anchor markup--p-anchor" href="https://distcc.github.io/" target="_blank" rel="nofollow noopener noreferrer" data-href="https://distcc.github.io/"&gt;distcc&lt;/a&gt;, which lets you distribute your compile jobs onto other machines. It requires you to have the exact same compilers installed on the worker machines (the servers) as on the developer machine (the client).&lt;/p&gt; &lt;p&gt;So I installed a spare machine with Fedora 29 running on it to make it part of my compilation cluster. I installed all the right compilers in the right versions to match the ones I have running on my local machine.&lt;/p&gt; &lt;p&gt;But then I realized that this would be a nightmare to maintain. I didn’t want to trade slowness for complexity. Not to mention all the things I would have to do when I upgrade my developer system to Fedora 30. Do I really have to upgrade &lt;em class="markup--em markup--p-em"&gt;all&lt;/em&gt; my worker machines in the cluster?&lt;/p&gt; &lt;p&gt;Also, I had an iMac sitting on another desk that doesn’t do much when we’re not doing video or photo editing or music recording with it. Could it be used for compilation? After all, macOS doesn’t have the exact same compilers that I have on my developer machine. This is what I meant by heterogeneous cluster of nodes in the introduction.&lt;/p&gt; &lt;p id="b371" class="graf graf--p graf-after--p"&gt;To spare you the details of how to set up a distcc server, or how to bring CMake to use it, we’ll jump into Tip #2 right away.&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone wp-image-595377 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/05/container-1024x100.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/05/container-1024x100.png" alt="" width="640" height="63" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/05/container-1024x100.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/container-300x29.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/container-768x75.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/p&gt; &lt;h2 id="0b58" class="graf graf--h3 graf-after--figure"&gt;Tip #2: Using a distcc server container&lt;/h2&gt; &lt;p id="46a3" class="graf graf--p graf-after--h3"&gt;I’ve mentioned before that I have an iMac, which does nothing when I work on my laptop. Wouldn’t it be nice if I could run a container (e.g., with Docker) on it that serves distcc with all the necessary tooling already set up?&lt;/p&gt; &lt;p id="e37c" class="graf graf--p graf-after--p"&gt;To better explain what I&amp;#8217;m trying to achieve, here’s a diagram of my compiler cluster architecture.&lt;/p&gt; &lt;div id="attachment_595387" style="width: 650px" class="wp-caption alignnone"&gt;&lt;img aria-describedby="caption-attachment-595387" class=" alignnone wp-image-595387 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/05/distcc-arch-1024x880.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/05/distcc-arch-1024x880.png" alt="" width="640" height="550" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/05/distcc-arch-1024x880.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/distcc-arch-300x258.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/distcc-arch-768x660.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/distcc-arch.png 1535w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-595387" class="wp-caption-text"&gt;Diagram of my compiler cluster architecture.&lt;/p&gt;&lt;/div&gt; &lt;p id="b5c1" class="graf graf--p graf-after--figure"&gt;It turns out, you can (almost) completely abstract away from the underlying operating system as long as you can run a &lt;code class="markup--code markup--p-code"&gt;docker run&lt;/code&gt; command in a terminal.&lt;/p&gt; &lt;p id="acd7" class="graf graf--p graf-after--p"&gt;If you’re not familiar with Docker, don’t worry; it is easy. Think of this rough analogy:&lt;/p&gt; &lt;ul class="postList"&gt; &lt;li id="5789" class="graf graf--li graf-after--p"&gt;A Docker &lt;strong class="markup--strong markup--li-strong"&gt;&lt;em class="markup--em markup--li-em"&gt;image&lt;/em&gt;&lt;/strong&gt; is like a &lt;strong class="markup--strong markup--li-strong"&gt;&lt;em class="markup--em markup--li-em"&gt;program&lt;/em&gt;&lt;/strong&gt; in Linux.&lt;/li&gt; &lt;li id="38b5" class="graf graf--li graf-after--li"&gt;&lt;strong class="markup--strong markup--li-strong"&gt;&lt;em class="markup--em markup--li-em"&gt;A container&lt;/em&gt;&lt;/strong&gt; is like a &lt;strong class="markup--strong markup--li-strong"&gt;&lt;em class="markup--em markup--li-em"&gt;process&lt;/em&gt;&lt;/strong&gt; of a program in Linux, a.k.a. an instance of the program.&lt;/li&gt; &lt;/ul&gt; &lt;p id="107b" class="graf graf--p graf-after--li"&gt;Obviously, the image must exist before the container can exist. To create an image, you write what’s called a &lt;code class="markup--code markup--p-code"&gt;&lt;a class="markup--anchor markup--p-anchor" href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="nofollow noopener noreferrer" data-href="https://docs.docker.com/engine/reference/builder/"&gt;Dockerfile&lt;/a&gt;&lt;/code&gt; that describes the base image  (think operating system here, even though it is not correct) you want to begin with. In my case, I want to be as close to my developer machine as possible, so I use the &lt;code class="markup--code markup--p-code"&gt;&lt;a class="markup--anchor markup--p-anchor" href="https://github.com/kwk/distcc-docker-images/blob/7195a75cda2772bab400a89d24f6daae41eece44/Dockerfile.fedora29#L1" target="_blank" rel="nofollow noopener noreferrer" data-href="https://github.com/kwk/distcc-docker-images/blob/7195a75cda2772bab400a89d24f6daae41eece44/Dockerfile.fedora29#L1"&gt;fedora:29&lt;/a&gt;&lt;/code&gt; image.&lt;/p&gt; &lt;pre id="b462" class="graf graf--pre graf-after--p"&gt;&lt;strong class="markup--strong markup--pre-strong"&gt;FROM&lt;/strong&gt; &lt;a class="markup--anchor markup--pre-anchor" href="https://github.com/kwk/distcc-docker-images/blob/7195a75cda2772bab400a89d24f6daae41eece44/Dockerfile.fedora29#L1" target="_blank" rel="nofollow noopener noreferrer" data-href="https://github.com/kwk/distcc-docker-images/blob/7195a75cda2772bab400a89d24f6daae41eece44/Dockerfile.fedora29#L1"&gt;fedora:29&lt;/a&gt;&lt;/pre&gt; &lt;p id="ce19" class="graf graf--p graf-after--pre"&gt;Then, you install tools that your image ships with (&lt;a class="markup--anchor markup--p-anchor" href="https://github.com/kwk/distcc-docker-images/blob/7195a75cda2772bab400a89d24f6daae41eece44/Dockerfile.fedora29#L12" target="_blank" rel="nofollow noopener noreferrer" data-href="https://github.com/kwk/distcc-docker-images/blob/7195a75cda2772bab400a89d24f6daae41eece44/Dockerfile.fedora29#L12"&gt;installing tools)&lt;/a&gt;:&lt;/p&gt; &lt;pre id="c21f" class="graf graf--pre graf-after--p"&gt;&lt;a class="markup--anchor markup--pre-anchor" href="https://docs.docker.com/engine/reference/builder/#run" target="_blank" rel="nofollow noopener noreferrer" data-href="https://docs.docker.com/engine/reference/builder/#run"&gt;&lt;strong class="markup--strong markup--pre-strong"&gt;RUN&lt;/strong&gt;&lt;/a&gt; dnf install -y \ clang \ distcc \ distcc-server \ doxygen \ gcc \ graphviz \ htop \ libasan \ libasan-static \ libedit-devel \ libxml2-devel \ make \ ncurses-devel \ net-tools \ python-devel \ swig \ &amp;#38;&amp;#38; yum clean all&lt;/pre&gt; &lt;p id="d4c9" class="graf graf--p graf-after--pre"&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; All of the above packages are not necessarily needed. I literally installed in my Docker image whatever I had installed on my developer laptop. This, of course, is not needed because distcc only sees pre-processed compilation units. That means it does not need to have all the include files available itself, but instead they will be pushed to the distcc server from my developer laptop.&lt;/p&gt; &lt;p id="1d9a" class="graf graf--p graf-after--p"&gt;In a Docker container, there can only be one top-level process that is the heart of the container. In our case, that is &lt;a class="markup--anchor markup--p-anchor" href="https://github.com/kwk/distcc-docker-images/blob/7195a75cda2772bab400a89d24f6daae41eece44/Dockerfile.fedora29#L42" target="_blank" rel="nofollow noopener noreferrer" data-href="https://github.com/kwk/distcc-docker-images/blob/7195a75cda2772bab400a89d24f6daae41eece44/Dockerfile.fedora29#L42"&gt;distcc&lt;/a&gt;. We configure it using a so-called &lt;a class="markup--anchor markup--p-anchor" href="https://docs.docker.com/engine/reference/builder/#entrypoint" target="_blank" rel="nofollow noopener noreferrer" data-href="https://docs.docker.com/engine/reference/builder/#entrypoint"&gt;&lt;em class="markup--em markup--p-em"&gt;entrypoint&lt;/em&gt;&lt;/a&gt; and pass along all the flags that we want to keep independent of the machine that runs the container:&lt;/p&gt; &lt;pre id="04fb" class="graf graf--pre graf-after--p"&gt;&lt;a class="markup--anchor markup--pre-anchor" href="https://docs.docker.com/engine/reference/builder/#entrypoint" target="_blank" rel="nofollow noopener noreferrer" data-href="https://docs.docker.com/engine/reference/builder/#entrypoint"&gt;&lt;strong class="markup--strong markup--pre-strong"&gt;ENTRYPOINT&lt;/strong&gt;&lt;/a&gt; [\ "distccd", \ "--daemon", \ "--no-detach", \ "--user", "distcc", \ "--port", "3632", \ "--stats", \ "--stats-port", "3633", \ "--log-stderr", \ "--listen", "0.0.0.0"\ ]&lt;/pre&gt; &lt;p id="5c23" class="graf graf--p graf-after--pre"&gt;If you don’t understand any of the flags above, you can look them up with &lt;code class="markup--code markup--p-code"&gt;&lt;a class="markup--anchor markup--p-anchor" href="https://linux.die.net/man/1/distccd" target="_blank" rel="nofollow noopener noreferrer" data-href="https://linux.die.net/man/1/distccd"&gt;man distccd&lt;/a&gt;&lt;/code&gt;.&lt;/p&gt; &lt;p id="6458" class="graf graf--p graf-after--p"&gt;Then, there are the flags for which we provide defaults but that you also can change:&lt;/p&gt; &lt;pre id="5adc" class="graf graf--pre graf-after--p"&gt;# By default the distcc server will accept clients from everywhere. # Feel free to run the docker image with different values for the # following params. &lt;a class="markup--anchor markup--pre-anchor" href="https://docs.docker.com/engine/reference/builder/#cmd" target="_blank" rel="nofollow noopener noreferrer" data-href="https://docs.docker.com/engine/reference/builder/#cmd"&gt;&lt;strong class="markup--strong markup--pre-strong"&gt;CMD&lt;/strong&gt;&lt;/a&gt; [\ "--allow", "0.0.0.0/0", \ "--nice", "5", \ "--jobs", "5" \ ]&lt;/pre&gt; &lt;p id="7b1c" class="graf graf--p graf-after--pre"&gt;That is essentially it. You can find the latest version of my &lt;code class="markup--code markup--p-code"&gt;Dockerfile&lt;/code&gt; &lt;a class="markup--anchor markup--p-anchor" href="https://github.com/kwk/distcc-docker-images/blob/master/Dockerfile.fedora29" target="_blank" rel="nofollow noopener noreferrer" data-href="https://github.com/kwk/distcc-docker-images/blob/master/Dockerfile.fedora29"&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;h4 id="b4e5" class="graf graf--h4 graf-after--p"&gt;How to build the Docker image out of the Dockerfile&lt;/h4&gt; &lt;p id="3c2e" class="graf graf--p graf-after--h4"&gt;Please note, that I’ve configured &lt;a class="markup--anchor markup--p-anchor" href="https://hub.docker.com/r/konradkleine/distcc" target="_blank" rel="nofollow noopener noreferrer" data-href="https://hub.docker.com/r/konradkleine/distcc"&gt;a repository on DockerHub&lt;/a&gt; to automatically build the latest version of my &lt;code class="markup--code markup--p-code"&gt;Dockerfile&lt;/code&gt; image. Instead of building the image yourself, you could just issue the following command to get the latest version:&lt;/p&gt; &lt;pre id="da69" class="graf graf--pre graf-after--p"&gt;$ docker pull konradkleine/distcc:fedora29&lt;/pre&gt; &lt;p id="3b99" class="graf graf--p graf-after--pre"&gt;If you plan to experiment and tinker with it, you can build the image like so:&lt;/p&gt; &lt;pre class="graf graf--pre graf-after--p"&gt;$ git clone &lt;a class="markup--anchor markup--pre-anchor" href="mailto:git@github.com" target="_blank" rel="nofollow noopener noreferrer" data-href="mailto:git@github.com"&gt;git@github.com&lt;/a&gt;:kwk/distcc-docker-images.git $ cd distcc-docker-images $ docker build -t konradkleine/distcc:fedora29 -f Dockerfile.fedora29 . &lt;/pre&gt; &lt;h4 id="6919" class="graf graf--h4 graf-after--pre"&gt;How to run the Docker image&lt;/h4&gt; &lt;p id="d63c" class="graf graf--p graf-after--h4"&gt;To make a Linux, MacOS or Windows-based computer part of your cluster, make sure you have installed and properly configured Docker on that machine. Then head over to a terminal and run the following command:&lt;/p&gt; &lt;pre id="d846" class="graf graf--pre graf-after--p"&gt;$ docker run \ -p 3632:3632 \ -p 3633:3633 \ -d \ konradkleine/distcc:fedora29&lt;/pre&gt; &lt;p id="513b" class="graf graf--p graf-after--pre"&gt;This will download (a.k.a. &lt;em class="markup--em markup--p-em"&gt;pull&lt;/em&gt;) my latest distcc Docker image (if not already available pulled) and run it in daemon mode ( &lt;code class="markup--code markup--p-code"&gt;-d&lt;/code&gt; ). It will expose distcc’s main port ( &lt;code class="markup--code markup--p-code"&gt;3632&lt;/code&gt; ) and distcc’s HTTP statistics port ( &lt;code class="markup--code markup--p-code"&gt;3633&lt;/code&gt; ) under the same numbers on the host machine.&lt;/p&gt; &lt;h4 id="ad31" class="graf graf--h4 graf-after--p"&gt;How to test the Docker image&lt;/h4&gt; &lt;p id="0ef7" class="graf graf--p graf-after--h4"&gt;The beauty of Docker to me is that you can always use your developer machine to try out stuff. For example, to run the distcc container on your localhost, you can run the same command from before but give the container a name this time so you can refer to it in subsequent Docker commands:&lt;/p&gt; &lt;pre id="4b9d" class="graf graf--pre graf-after--p"&gt;$ docker run \ -p 3632:3632 \ -p 3633:3633 \ -d \ &lt;strong class="markup--strong markup--pre-strong"&gt; --name localdistcc \&lt;/strong&gt; konradkleine/distcc:fedora29&lt;/pre&gt; &lt;p id="d1bf" class="graf graf--p graf-after--pre"&gt;Then I suggest running &lt;code class="markup--code markup--p-code"&gt;htop&lt;/code&gt;inside the newly created container to see what’s going on:&lt;/p&gt; &lt;pre class="graf graf--pre graf-after--p"&gt;$ docker exec -it &lt;strong class="markup--strong markup--pre-strong"&gt;localdistcc&lt;/strong&gt; htop &lt;/pre&gt; &lt;div id="attachment_595397" style="width: 650px" class="wp-caption alignnone"&gt;&lt;img aria-describedby="caption-attachment-595397" class=" alignnone wp-image-595397 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/05/Bildschirmfoto-von-2019-04-23-17-06-14-1024x296.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/05/Bildschirmfoto-von-2019-04-23-17-06-14-1024x296.png" alt="" width="640" height="185" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/05/Bildschirmfoto-von-2019-04-23-17-06-14-1024x296.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/Bildschirmfoto-von-2019-04-23-17-06-14-300x87.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/Bildschirmfoto-von-2019-04-23-17-06-14-768x222.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/Bildschirmfoto-von-2019-04-23-17-06-14.png 1183w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-595397" class="wp-caption-text"&gt;Running htop inside the localdistcc container shows that your container only runs distccd.&lt;/p&gt;&lt;/div&gt; &lt;p id="2047" class="graf graf--p graf--leading"&gt;Let’s compile some code and distribute it to our localdistcc node. Here I’m going to &lt;a class="markup--anchor markup--p-anchor" href="https://lldb.llvm.org/resources/build.html#building-lldb-on-linux-freebsd-and-netbsd" target="_blank" rel="nofollow noopener noreferrer" data-href="https://lldb.llvm.org/resources/build.html#building-lldb-on-linux-freebsd-and-netbsd"&gt;compile LLDB&lt;/a&gt; with adjustments:&lt;/p&gt; &lt;pre id="79a9" class="graf graf--pre graf-after--p"&gt;$ &lt;code class="markup--code markup--pre-code u-paddingRight0 u-marginRight0"&gt;git clone &lt;a class="markup--anchor markup--pre-anchor" href="https://github.com/llvm/llvm-project.git" target="_blank" rel="nofollow noopener noreferrer" data-href="https://github.com/llvm/llvm-project.git"&gt;https://github.com/llvm/llvm-project.git&lt;/a&gt; ~/dev/llvm-project&lt;/code&gt;&lt;/pre&gt; &lt;pre id="4c76" class="graf graf--pre graf-after--pre"&gt;&lt;em class="markup--em markup--pre-em"&gt;# Get the IP address of the &lt;/em&gt;&lt;strong class="markup--strong markup--pre-strong"&gt;&lt;em class="markup--em markup--pre-em"&gt;localdistcc&lt;/em&gt;&lt;/strong&gt;&lt;em class="markup--em markup--pre-em"&gt; container&lt;/em&gt;&lt;/pre&gt; &lt;pre id="0e01" class="graf graf--pre graf-after--pre"&gt;$ export LOCAL_DISTCC_IP=&lt;strong class="markup--strong markup--pre-strong"&gt;$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' localdistcc)&lt;/strong&gt;&lt;/pre&gt; &lt;pre id="48b1" class="graf graf--pre graf-after--pre"&gt;$ export DISTCC_HOSTS="$LOCAL_DISTCC_IP&lt;strong class="markup--strong markup--pre-strong"&gt;/7&lt;/strong&gt; localhost"&lt;/pre&gt; &lt;pre id="c84a" class="graf graf--pre graf-after--pre"&gt;$ mkdir -p ~/dev/llvm-builds/release-gcc-distcc&lt;/pre&gt; &lt;pre id="6a76" class="graf graf--pre graf-after--pre"&gt;$ cd ~/dev/llvm-builds/release-gcc-distcc&lt;/pre&gt; &lt;pre id="3d0c" class="graf graf--pre graf-after--pre"&gt;$ cmake ~/dev/llvm-project/llvm \ -G &lt;strong class="markup--strong markup--pre-strong"&gt;Ninja&lt;/strong&gt; \ -DCMAKE_BUILD_TYPE=Release \ -DLLVM_USE_LINKER=gold \ -DLLVM_ENABLE_PROJECTS="lldb;clang;lld" \ -D&lt;strong class="markup--strong markup--pre-strong"&gt;CMAKE_C_COMPILER&lt;/strong&gt;=&lt;strong class="markup--strong markup--pre-strong"&gt;/usr/bin/gcc&lt;/strong&gt; \ -D&lt;strong class="markup--strong markup--pre-strong"&gt;CMAKE_CXX_COMPILER&lt;/strong&gt;=&lt;strong class="markup--strong markup--pre-strong"&gt;/usr/bin/g++&lt;/strong&gt; \ -DCMAKE_EXPORT_COMPILE_COMMANDS=1 \ -D&lt;strong class="markup--strong markup--pre-strong"&gt;CMAKE_C_COMPILER_LAUNCHER&lt;/strong&gt;="&lt;strong class="markup--strong markup--pre-strong"&gt;ccache;distcc&lt;/strong&gt;" \ -D&lt;strong class="markup--strong markup--pre-strong"&gt;CMAKE_CXX_COMPILER_LAUNCHER&lt;/strong&gt;=&lt;strong class="markup--strong markup--pre-strong"&gt;"ccache;distcc"&lt;/strong&gt;&lt;/pre&gt; &lt;pre id="3fc0" class="graf graf--pre graf-after--pre"&gt;$ ninja lldb &lt;strong class="markup--strong markup--pre-strong"&gt;-j $(distcc -j)&lt;/strong&gt;&lt;/pre&gt; &lt;p id="a643" class="graf graf--p graf-after--pre"&gt;I’ve marked the sections in bold that are worth looking at. Things to notice are:&lt;/p&gt; &lt;p id="4579" class="graf graf--p graf-after--p"&gt;Get the IP address of the container running the distcc container using &lt;code class="markup--code markup--p-code"&gt;docker inspect&lt;/code&gt; .&lt;/p&gt; &lt;p id="61f7" class="graf graf--p graf-after--p"&gt;When exporting &lt;code class="markup--code markup--p-code"&gt;DISTCC_HOSTS&lt;/code&gt;, I suggest that you take a look at the &lt;code class="markup--code markup--p-code"&gt;&lt;strong class="markup--strong markup--p-strong"&gt;/7&lt;/strong&gt;&lt;/code&gt; because that tells distcc to distribute seven jobs to this machine. My machine has eight cores, and I don’t want it to run out of power. By default, only four jobs are sent (see &lt;code class="markup--code markup--p-code"&gt;man distcc&lt;/code&gt;):&lt;/p&gt; &lt;blockquote id="9404" class="graf graf--blockquote graf-after--p"&gt;&lt;p&gt;&lt;strong&gt;/LIMIT&lt;/strong&gt; A decimal limit can be added to any host specification to restrict the number of jobs that this client will send to the machine. The limit defaults to four per host (two for local‐host), but may be further restricted by the server. You should only need to increase this for servers with more than two processors.&lt;/p&gt;&lt;/blockquote&gt; &lt;p id="5f22" class="graf graf--p graf-after--blockquote"&gt;Generate a build system for ninja using &lt;code class="markup--code markup--p-code"&gt;-G Ninja&lt;/code&gt;.&lt;/p&gt; &lt;p id="b745" class="graf graf--p graf-after--p"&gt;We use fully qualified paths to the compilers we want to use by specifying &lt;code class="markup--code markup--p-code"&gt;CMAKE_C_COMPILER=/usr/bin/gcc&lt;/code&gt; and &lt;code class="markup--code markup--p-code"&gt;CMAKE_CXX_COMPILER=/usr/bin/g++&lt;/code&gt; . See the next section about masquerading to understand why we do this.&lt;/p&gt; &lt;p id="44e4" class="graf graf--p graf-after--p"&gt;Use CMake’s &lt;code class="markup--code markup--p-code"&gt;&lt;a class="markup--anchor markup--p-anchor" href="https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER_LAUNCHER.html" target="_blank" rel="noopener nofollow noreferrer" data-href="https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER_LAUNCHER.html"&gt;CMAKE_&amp;#60;LANG&amp;#62;_COMPILER_LAUNCHER&lt;/a&gt;&lt;/code&gt; in order to call &lt;code class="markup--code markup--p-code"&gt;ccache distcc /usr/bin/gcc&lt;/code&gt; instead of just &lt;code class="markup--code markup--p-code"&gt;/usr/bin/gcc&lt;/code&gt;. This is a nice mechanism to avoid masquerading &lt;code class="markup--code markup--p-code"&gt;gcc&lt;/code&gt; or &lt;code class="markup--code markup--p-code"&gt;g++&lt;/code&gt; .&lt;/p&gt; &lt;p class="graf graf--p graf-after--p"&gt;Masquerading is a technique where you create file named &lt;code class="markup--code markup--p-code"&gt;gcc&lt;/code&gt; and make it available on your &lt;code class="markup--code markup--p-code"&gt;PATH&lt;/code&gt; to intercept calls to &lt;code class="markup--code markup--p-code"&gt;gcc&lt;/code&gt;. Oddly enough, Fedora 29 does this when you install &lt;code class="markup--code markup--p-code"&gt;ccache&lt;/code&gt; . That package creates &lt;code class="markup--code markup--p-code"&gt;/usr/lib64/ccache/gcc&lt;/code&gt; that points to &lt;code class="markup--code markup--p-code"&gt;/usr/bin/ccache&lt;/code&gt; . This effectively masquerades your local &lt;code class="markup--code markup--p-code"&gt;gcc&lt;/code&gt; binary with &lt;code class="markup--code markup--p-code"&gt;ccache&lt;/code&gt; . As a matter of fact, &lt;code class="markup--code markup--p-code"&gt;ccache&lt;/code&gt; will masquerade a whole armada of compilers including but not limited to &lt;code class="markup--code markup--p-code"&gt;gcc, g++, clang, clang++&lt;/code&gt; (see &lt;code class="markup--code markup--p-code"&gt;rpm -ql ccache&lt;/code&gt; for the complete list). This is why we use fully qualified paths to the compiler &lt;code class="markup--code markup--p-code"&gt;/usr/bin/gcc&lt;/code&gt; .&lt;/p&gt; &lt;p id="b654" class="graf graf--p graf-after--p"&gt;We let discc figure out how many build jobs to run in parallel by looking at the available hosts: &lt;code class="markup--code markup--p-code"&gt;-j $(distcc -j)&lt;/code&gt; .&lt;/p&gt; &lt;p id="e620" class="graf graf--p graf-after--p"&gt;While &lt;code class="markup--code markup--p-code"&gt;ninja&lt;/code&gt; builds, take a look at the &lt;code class="markup--code markup--p-code"&gt;distccmon-gnome&lt;/code&gt; output (see the &amp;#8220;Troubleshooting&amp;#8221; section). It should show something like this:&lt;/p&gt; &lt;div id="attachment_595407" style="width: 627px" class="wp-caption alignnone"&gt;&lt;img aria-describedby="caption-attachment-595407" class=" alignnone wp-image-595407 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/05/Bildschirmfoto-von-2019-04-24-11-19-12.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/05/Bildschirmfoto-von-2019-04-24-11-19-12.png" alt="" width="617" height="246" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/05/Bildschirmfoto-von-2019-04-24-11-19-12.png 617w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/Bildschirmfoto-von-2019-04-24-11-19-12-300x120.png 300w" sizes="(max-width: 617px) 100vw, 617px" /&gt;&lt;p id="caption-attachment-595407" class="wp-caption-text"&gt;distccmon-gnome output when compiling locally using a distcc container.&lt;/p&gt;&lt;/div&gt; &lt;p id="5fd8" class="graf graf--p graf-after--figure"&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; &lt;code class="markup--code markup--p-code"&gt;distcc -j&lt;/code&gt; assumes that all your hosts listed in &lt;code class="markup--code markup--p-code"&gt;DISTCC_HOSTS&lt;/code&gt; are distinct machines. But the container runs on your localhost and thereby consumes resources from it. This could impact the performance of your developer machine. If things get slow, just abort the compilation; this is just for testing anyway.&lt;/p&gt; &lt;h3 id="2a9b" class="graf graf--h3 graf-after--p"&gt;Troubleshooting&lt;/h3&gt; &lt;h4 id="5cb2" class="graf graf--h4 graf-after--h3"&gt;How can I visualize the distribution of the compilation?&lt;/h4&gt; &lt;p id="b529" class="graf graf--p graf-after--h4"&gt;On Fedora 29, I use &lt;code class="markup--code markup--p-code"&gt;distccmon-gnome&lt;/code&gt; or &lt;code class="markup--code markup--p-code"&gt;distccmon-text&lt;/code&gt; (see screenshots below). To install them, run &lt;code class="markup--code markup--p-code"&gt;sudo dnf distcc-gnome distcc&lt;/code&gt; .&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone wp-image-595417 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/05/Bildschirmfoto-von-2019-04-23-14-45-04.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/05/Bildschirmfoto-von-2019-04-23-14-45-04.png" alt="" width="710" height="204" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/05/Bildschirmfoto-von-2019-04-23-14-45-04.png 710w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/Bildschirmfoto-von-2019-04-23-14-45-04-300x86.png 300w" sizes="(max-width: 710px) 100vw, 710px" /&gt;&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone wp-image-595427 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/05/Bildschirmfoto-von-2019-04-23-14-42-39.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/05/Bildschirmfoto-von-2019-04-23-14-42-39.png" alt="" width="982" height="362" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/05/Bildschirmfoto-von-2019-04-23-14-42-39.png 982w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/Bildschirmfoto-von-2019-04-23-14-42-39-300x111.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/Bildschirmfoto-von-2019-04-23-14-42-39-768x283.png 768w" sizes="(max-width: 982px) 100vw, 982px" /&gt;&lt;/p&gt; &lt;section class="section section--body"&gt; &lt;div class="section-content"&gt; &lt;div class="section-inner sectionLayout--insetColumn"&gt; &lt;h4 id="0c27" class="graf graf--h4 graf-after--figure"&gt;How do I test that all my hosts are serving distcc?&lt;/h4&gt; &lt;p id="3bc2" class="graf graf--p graf-after--h4"&gt;Test that all your nodes are serving distcc with netcat (&lt;code class="markup--code markup--p-code"&gt;nc&lt;/code&gt;). In the following command, replace &lt;code class="markup--code markup--p-code"&gt;192.168.178.33 192.168.178.39&lt;/code&gt; with the IPs of your hosts. &lt;strong&gt;NOTE:&lt;/strong&gt; I’m often on a VPN, so I use fixed IP addresses to mitigate issues with resolving host names.&lt;/p&gt; &lt;pre id="a48f" class="graf graf--pre graf-after--p"&gt;$ for i in 192.168.178.33 192.168.178.39; do nc -zv $i 3632; done&lt;/pre&gt; &lt;pre id="833e" class="graf graf--pre graf-after--pre"&gt;Ncat: Version 7.70 ( &lt;a class="markup--anchor markup--pre-anchor" href="https://nmap.org/ncat" target="_blank" rel="nofollow noopener noreferrer" data-href="https://nmap.org/ncat"&gt;https://nmap.org/ncat&lt;/a&gt; ) Ncat: Connected to 192.168.178.33:3632. Ncat: 0 bytes sent, 0 bytes received in 0.01 seconds. Ncat: Version 7.70 ( &lt;a class="markup--anchor markup--pre-anchor" href="https://nmap.org/ncat" target="_blank" rel="nofollow noopener noreferrer" data-href="https://nmap.org/ncat"&gt;https://nmap.org/ncat&lt;/a&gt; ) Ncat: Connected to 192.168.178.39:3632. Ncat: 0 bytes sent, 0 bytes received in 0.01 seconds.&lt;/pre&gt; &lt;p id="67fd" class="graf graf--p graf-after--pre"&gt;Alternatively, you can use the much slower &lt;code class="markup--code markup--p-code"&gt;nmap&lt;/code&gt;:&lt;/p&gt; &lt;pre id="e7c1" class="graf graf--pre graf-after--p"&gt;$ nmap -A 192.168.178.33/32 -p 3632 -Pn Starting Nmap 7.70 ( &lt;a class="markup--anchor markup--pre-anchor" href="https://nmap.org" target="_blank" rel="nofollow noopener noreferrer" data-href="https://nmap.org"&gt;https://nmap.org&lt;/a&gt; ) at 2019-04-23 14:05 CEST Nmap scan report for MyServer (192.168.178.33) Host is up (0.00069s latency).&lt;/pre&gt; &lt;pre id="ef42" class="graf graf--pre graf-after--pre"&gt;PORT STATE SERVICE VERSION 3632/tcp open distccd distccd v1 ((GNU) 8.3.1 20190223 (Red Hat 8.3.1-2))&lt;/pre&gt; &lt;pre id="c6d1" class="graf graf--pre graf-after--pre"&gt;Service detection performed. Please report any incorrect results at &lt;a class="markup--anchor markup--pre-anchor" href="https://nmap.org/submit/" target="_blank" rel="nofollow noopener noreferrer" data-href="https://nmap.org/submit/"&gt;https://nmap.org/submit/&lt;/a&gt; . Nmap done: 1 IP address (1 host up) scanned in 6.68 seconds&lt;/pre&gt; &lt;h4 id="8e88" class="graf graf--h4 graf-after--pre"&gt;For better security, how can I specify who is allowed to use my distcc container?&lt;/h4&gt; &lt;p id="9978" class="graf graf--p graf-after--h4"&gt;Please note, that the &lt;code class="markup--code markup--p-code"&gt;CMD&lt;/code&gt; section in the &lt;code class="markup--code markup--p-code"&gt;Dockerfile&lt;/code&gt; defines a default of &lt;code class="markup--code markup--p-code"&gt;--allow 0.0.0.0/0&lt;/code&gt; to allow connections from everywhere. I suggest that you adjust this parameter when running the distcc container:&lt;/p&gt; &lt;pre id="bf5a" class="graf graf--pre graf-after--p"&gt;$ docker run \ -p 3632:3632 \ -p 3633:3633 \ -d \ konradkleine/distcc:fedora29 \ --allow &lt;strong class="markup--strong markup--pre-strong"&gt;&amp;#60;YOUR_HOST&amp;#62;&lt;/strong&gt;&lt;/pre&gt; &lt;h4 id="9ff5" class="graf graf--h4 graf-after--pre"&gt;Do I have to use ccache or can I just use distcc?&lt;/h4&gt; &lt;p id="5b2b" class="graf graf--p graf-after--h4"&gt;You can absolutely only use one or the other, just adjust the &lt;code class="markup--code markup--p-code"&gt;CMAKE_C_COMPILER_LAUNCHER&lt;/code&gt; and &lt;code class="markup--code markup--p-code"&gt;CMAKE_CXX_COMPILER_LAUNCHER&lt;/code&gt; variables when configuring/generating your project with CMake.&lt;/p&gt; &lt;pre id="5563" class="graf graf--pre graf-after--p"&gt;# To use &lt;strong class="markup--strong markup--pre-strong"&gt;ccache and distcc&lt;/strong&gt; -DCMAKE_C_COMPILER_LAUNCHER="&lt;strong class="markup--strong markup--pre-strong"&gt;ccache;distcc&lt;/strong&gt;" \ -DCMAKE_CXX_COMPILER_LAUNCHER="&lt;strong class="markup--strong markup--pre-strong"&gt;ccache;distcc&lt;/strong&gt;"&lt;/pre&gt; &lt;pre id="cc13" class="graf graf--pre graf-after--pre"&gt;# To use &lt;strong class="markup--strong markup--pre-strong"&gt;ccache alone&lt;/strong&gt; (please note, that no distribution will # happen if you choose this option.) -DCMAKE_C_COMPILER_LAUNCHER="&lt;strong class="markup--strong markup--pre-strong"&gt;ccache&lt;/strong&gt;" \ -DCMAKE_CXX_COMPILER_LAUNCHER="&lt;strong class="markup--strong markup--pre-strong"&gt;ccache&lt;/strong&gt;"&lt;/pre&gt; &lt;pre id="7252" class="graf graf--pre graf-after--pre"&gt;# To use &lt;strong class="markup--strong markup--pre-strong"&gt;distcc alone&lt;/strong&gt; -DCMAKE_C_COMPILER_LAUNCHER="&lt;strong class="markup--strong markup--pre-strong"&gt;distcc&lt;/strong&gt;" \ -DCMAKE_CXX_COMPILER_LAUNCHER="&lt;strong class="markup--strong markup--pre-strong"&gt;distcc&lt;/strong&gt;"&lt;/pre&gt; &lt;h4 id="e337" class="graf graf--h4 graf-after--pre"&gt;How do I send more than 4  jobs to a machine?&lt;/h4&gt; &lt;p id="fcd6" class="graf graf--p graf-after--h4"&gt;In your &lt;code class="markup--code markup--p-code"&gt;DISTCC_HOSTS&lt;/code&gt; environment variable, you need to adjust the limit, which defaults to 4. It is specified with a &lt;code class="markup--code markup--p-code"&gt;/&amp;#60;LIMIT&amp;#62;&lt;/code&gt;after the hostname:&lt;/p&gt; &lt;pre id="bd13" class="graf graf--pre graf-after--p"&gt;export DISTCC_HOSTS="fasthost/8 slowhost/2 localhost"&lt;/pre&gt; &lt;h4 id="7c88" class="graf graf--h4 graf-after--pre"&gt;How can I see if ccache works for me?&lt;/h4&gt; &lt;p id="a1d1" class="graf graf--p graf-after--h4"&gt;I suggest that you take a look at the output of &lt;code class="markup--code markup--p-code"&gt;ccache --show-stats&lt;/code&gt; and inspect the &lt;em class="markup--em markup--p-em"&gt;cache hit rate&lt;/em&gt;. For example, the following hit rate is at 15.61%, which is better than nothing, I’d say.&lt;/p&gt; &lt;pre id="d1a0" class="graf graf--pre graf-after--p graf--trailing"&gt;$ ccache --show-stats cache directory /home/kkleine/.ccache primary config /home/kkleine/.ccache/ccache.conf secondary config (readonly) /etc/ccache.conf stats zero time Wed Apr 17 18:44:31 2019 cache hit (direct) 1787 cache hit (preprocessed) 21 cache miss 9774 &lt;strong class="markup--strong markup--pre-strong"&gt;cache hit rate 15.61 %&lt;/strong&gt; called for link 584 called for preprocessing 35 compile failed 12 preprocessor error 116 unsupported code directive 4 no input file 19 cleanups performed 0 files in cache 25218 cache size 1.2 GB max cache size 5.0 GB&lt;/pre&gt; &lt;p&gt;I hope you liked reading this article and got some value out of it. Check out the accompanying video, too.&lt;/p&gt; &lt;p&gt;&lt;iframe src="https://www.youtube.com/embed/kIKSx30t8bk" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/section&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F15%2F2-tips-to-make-your-c-projects-compile-3-times-faster%2F&amp;#38;linkname=2%20tips%20to%20make%20your%20C%2B%2B%20projects%20compile%203%20times%20faster" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F15%2F2-tips-to-make-your-c-projects-compile-3-times-faster%2F&amp;#38;linkname=2%20tips%20to%20make%20your%20C%2B%2B%20projects%20compile%203%20times%20faster" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F15%2F2-tips-to-make-your-c-projects-compile-3-times-faster%2F&amp;#38;linkname=2%20tips%20to%20make%20your%20C%2B%2B%20projects%20compile%203%20times%20faster" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F15%2F2-tips-to-make-your-c-projects-compile-3-times-faster%2F&amp;#38;linkname=2%20tips%20to%20make%20your%20C%2B%2B%20projects%20compile%203%20times%20faster" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F15%2F2-tips-to-make-your-c-projects-compile-3-times-faster%2F&amp;#38;linkname=2%20tips%20to%20make%20your%20C%2B%2B%20projects%20compile%203%20times%20faster" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F15%2F2-tips-to-make-your-c-projects-compile-3-times-faster%2F&amp;#38;linkname=2%20tips%20to%20make%20your%20C%2B%2B%20projects%20compile%203%20times%20faster" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F15%2F2-tips-to-make-your-c-projects-compile-3-times-faster%2F&amp;#38;linkname=2%20tips%20to%20make%20your%20C%2B%2B%20projects%20compile%203%20times%20faster" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F15%2F2-tips-to-make-your-c-projects-compile-3-times-faster%2F&amp;#38;linkname=2%20tips%20to%20make%20your%20C%2B%2B%20projects%20compile%203%20times%20faster" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F15%2F2-tips-to-make-your-c-projects-compile-3-times-faster%2F&amp;#038;title=2%20tips%20to%20make%20your%20C%2B%2B%20projects%20compile%203%20times%20faster" data-a2a-url="https://developers.redhat.com/blog/2019/05/15/2-tips-to-make-your-c-projects-compile-3-times-faster/" data-a2a-title="2 tips to make your C++ projects compile 3 times faster"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/05/15/2-tips-to-make-your-c-projects-compile-3-times-faster/"&gt;2 tips to make your C++ projects compile 3 times faster&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/V_Ti7m6WPj8" height="1" width="1" alt=""/&gt;</content><summary>In this article, I will demonstrate how to speed up your compilation times by distributing compilation load using a distcc server container.  Specifically, I’ll show how to set up and use containers running a distcc server to distribute the compilation load over a heterogeneous cluster of nodes (development laptop, old desktop PC, and a Mac). To improve the speed of recompilation, I will use ccach...</summary><dc:creator>Konrad Kleine</dc:creator><dc:date>2019-05-15T10:00:23Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/05/15/2-tips-to-make-your-c-projects-compile-3-times-faster/</feedburner:origLink></entry><entry><title>JBossWS 5.3.0.Final is out!</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/4-QOdeiYONQ/jbossws-530final-is-out.html" /><category term="CXF" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_jbossws" scheme="searchisko:content:tags" /><category term="jax-ws" scheme="searchisko:content:tags" /><category term="jaxws" scheme="searchisko:content:tags" /><category term="jbossws" scheme="searchisko:content:tags" /><category term="jbws" scheme="searchisko:content:tags" /><category term="jdk11" scheme="searchisko:content:tags" /><category term="release" scheme="searchisko:content:tags" /><category term="webservices" scheme="searchisko:content:tags" /><category term="wildfly" scheme="searchisko:content:tags" /><author><name>jimma</name></author><id>searchisko:content:id:jbossorg_blog-jbossws_5_3_0_final_is_out</id><updated>2019-05-14T10:56:29Z</updated><published>2019-05-14T10:54:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;br /&gt;After couple days work, I am proud to announce JBossWS 5.3.0.Final has been &lt;a href="https://jbossws.github.io/"&gt;released&lt;/a&gt;&lt;a href="https://jbossws.github.io/"&gt;.&lt;/a&gt; &lt;br /&gt;&lt;br /&gt;This new release brings a lot of component upgrade, issue fix and improvement. Apache CXF is now upgraded to 3.3.1. and JDK11 or higher version is better supported. For more detailed info and full list of issues resolved, please check &lt;a href="http://download.jboss.org/jbossws/ReleaseNotes-jbossws-cxf-5.3.0.Final.txt"&gt;release notes.&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;If you have any problem and want to send feedback for this new release, please post at&lt;a href="https://developer.jboss.org/en/jbossws/cxf"&gt; jbossws forum&lt;/a&gt; or file issues in JIRA at: &lt;a href="https://issues.jboss.org/projects/JBWS"&gt;https://issues.jboss.org/projects/JBWS&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/4-QOdeiYONQ" height="1" width="1" alt=""/&gt;</content><summary>After couple days work, I am proud to announce JBossWS 5.3.0.Final has been released. This new release brings a lot of component upgrade, issue fix and improvement. Apache CXF is now upgraded to 3.3.1. and JDK11 or higher version is better supported. For more detailed info and full list of issues resolved, please check release notes. If you have any problem and want to send feedback for this new r...</summary><dc:creator>jimma</dc:creator><dc:date>2019-05-14T10:54:00Z</dc:date><feedburner:origLink>http://jbossws.blogspot.com/2019/05/jbossws-530final-is-out.html</feedburner:origLink></entry><entry><title>Bringing IoT to Red Hat AMQ Online</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/oLJRJwZ6too/" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="integration" scheme="searchisko:content:tags" /><category term="Internet of Things" scheme="searchisko:content:tags" /><category term="IoT solutions" scheme="searchisko:content:tags" /><category term="Red Hat AMQ" scheme="searchisko:content:tags" /><author><name>Jens Reimann</name></author><id>searchisko:content:id:jbossorg_blog-bringing_iot_to_red_hat_amq_online</id><updated>2019-05-14T10:00:21Z</updated><published>2019-05-14T10:00:21Z</published><content type="html">&lt;p&gt;&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_amq/7.2/html/amq_online_1.1_on_openshift_container_platform_release_notes/index" target="_blank" rel="noopener noreferrer"&gt;Red Hat AMQ Online 1.1&lt;/a&gt; was recently announced, and I am excited about it because it contains a tech preview of our Internet of Things (&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_amq/7.2/html/amq_online_1.1_on_openshift_container_platform_release_notes/tech-preview-online#internet_of_things_iot_functionality" target="_blank" rel="noreferrer noopener" aria-label="IoT support (opens in a new tab)"&gt;IoT) support&lt;/a&gt;. AMQ Online is the &amp;#8220;messaging as service solution&amp;#8221; from Red Hat AMQ. Leveraging the work we did on &lt;a href="https://www.eclipse.org/hono/" target="_blank" rel="noopener noreferrer"&gt;Eclipse Hono&lt;/a&gt; allows us to integrate a &lt;a href="https://dentrassi.de/2018/07/25/scaling-iot-eclipse-hono/" target="_blank" rel="noopener noreferrer"&gt;scalable&lt;/a&gt;, cloud-native IoT personality into this general-purpose messaging layer. And the whole reason why you need an IoT messaging layer is so you can focus on connecting your cloud-side application with the millions of devices that you have out there.&lt;/p&gt; &lt;p&gt;&lt;span id="more-595017"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;What is Eclipse Hono?&lt;/h2&gt; &lt;p&gt;Eclipse Hono is an IoT abstraction layer. It defines APIs in order to build an IoT stack in the cloud, taking care of things like device credentials, protocols, and scalability. For some of those APIs, it comes with a ready-to-run implementation, such as the MQTT protocol adapter. For others, such as the device registry, it only defines the necessary API. The actual implementation must be provided to the system.&lt;/p&gt; &lt;div id="attachment_595277" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/05/hono-overview2.svg_.png"&gt;&lt;img aria-describedby="caption-attachment-595277" class=" size-large wp-image-595277 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/05/hono-overview2.svg_-1024x442.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/05/hono-overview2.svg_-1024x442.png" alt="Eclipse Hono IoT architecture overview" width="640" height="276" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/05/hono-overview2.svg_-1024x442.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/hono-overview2.svg_-300x130.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/hono-overview2.svg_-768x332.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-595277" class="wp-caption-text"&gt;Eclipse Hono overview&lt;/p&gt;&lt;/div&gt; &lt;p&gt;A key feature of Hono is that it normalizes the different IoT-specific protocols on &lt;a href="http://www.amqp.org/specification/1.0/amqp-org-download" target="_blank" rel="noopener noreferrer"&gt;AMQP 1.0&lt;/a&gt;. This protocol is common on the data center side, and it is quite capable of handling the requirements on throughput and back-pressure. However, on the IoT devices side, other protocols might have more benefits for certain use cases. MQTT is a favorite for many people, as is plain HTTP due to its simplicity. LoRaWAN, CoAP, Sigfox, etc. all have their pros and cons. If you want to play in the world of IoT, you simply have to support them all. Even when it comes to custom protocols, Hono provides a software stack to easily implement your custom protocol.&lt;/p&gt; &lt;h2&gt;AMQ Online&lt;/h2&gt; &lt;p&gt;Hono requires an AMQP 1.0 messaging backend. It requires a broker and a component called &amp;#8220;router&amp;#8221; (which doesn&amp;#8217;t own messages but only forwards them to the correct receiver). Of course, it expects the AMQP layer to be as scalable as Hono itself. AMQ Online is a &amp;#8220;self-service,&amp;#8221; messaging solution for the cloud. So it makes sense to allow Hono to run on top of it. We had this deployment model for a while in Hono, allowing the use of &lt;a href="https://enmasse.io/" target="_blank" rel="noopener noreferrer"&gt;EnMasse&lt;/a&gt; (the upstream project of AMQ Online).&lt;/p&gt; &lt;h2&gt;Self-service IoT&lt;/h2&gt; &lt;p&gt;In a world of Kubernetes and operators, the thing that you are actually looking for is more like this:&lt;/p&gt; &lt;pre&gt;kind: IoTProject apiVersion: iot.enmasse.io/v1alpha1 metadata: name: iot namespace: myapp spec: downstreamStrategy: managedStrategy: addressSpace: name: iot plan: standard-unlimited addresses: telemetry: plan: standard-small-anycast event: plan: standard-small-queue command: plan: standard-small-anycast &lt;/pre&gt; &lt;p&gt;You simply define your IoT project, by creating a new custom resource using &lt;code&gt;kubectl create -f&lt;/code&gt; and you are done. If you have the IoT operator of AMQ Online 1.1 deployed, then it will create the necessary address space for you, and set up the required addresses.&lt;/p&gt; &lt;p&gt;The IoT project will also automatically act as a Hono tenant. In this example, the Hono tenant would be &lt;code&gt;myapp.iot&lt;/code&gt;, and so the full authentication ID of e.g. &lt;code&gt;sensor1&lt;/code&gt; would be &lt;code&gt;sensor1@myapp.iot&lt;/code&gt;. The IoT project also holds all the optional tenant configuration under the section &lt;code&gt;.spec.configuration&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;With the &lt;a href="https://github.com/ctron/hat" target="_blank" rel="noopener noreferrer"&gt;Hono admin tool,&lt;/a&gt; you can quickly register a new device with your installation (the documentation will also tell you how to achieve the same with &lt;code&gt;curl&lt;/code&gt;):&lt;/p&gt; &lt;pre&gt;$ # register the new context once with 'hat' $ hat context create myapp1 --default-tenant myapp.iot https://$(oc -n messaging-infra get routes device-registry --template='{{ .spec.host }}') $ # register a new device and set credentials $ hat reg create 4711 $ hat cred set-password sensor1 sha-512 hono-secret --device 4711 &lt;/pre&gt; &lt;p&gt;With that, you can simply use Hono as always. First, start the consumer:&lt;/p&gt; &lt;pre&gt;$ # from the hono/cli directory $ export MESSAGING_HOST=$(oc -n myapp get addressspace iot -o jsonpath={.status.endpointStatuses[?(@.name==\'messaging\')].externalHost}) $ export MESSAGING_PORT=443 $ mvn spring-boot:run -Drun.arguments=--hono.client.host=$MESSAGING_HOST,--hono.client.port=$MESSAGING_PORT,--hono.client.username=consumer,--hono.client.password=foobar,--tenant.id=myapp.iot,--hono.client.trustStorePath=target/config/hono-demo-certs-jar/tls.crt,--message.type=telemetry &lt;/pre&gt; &lt;p&gt;And then publish some data to the telemetry channel:&lt;/p&gt; &lt;pre&gt;$ curl -X POST -i -u sensor1@myapp.iot:hono-secret -H 'Content-Type: application/json' --data-binary '{"temp": 5}' https://$(oc -n enmasse-infra get routes iot-http-adapter --template='{{ .spec.host }}')/telemetry &lt;/pre&gt; &lt;p&gt;For more detailed instructions, see: &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_amq/7.2/html/evaluating_amq_online_on_openshift_container_platform/assembly-iot-messaging" target="_blank" rel="noopener noreferrer"&gt;Getting Started with Internet of Things (IoT) on AMQ Online&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;IoT integration&lt;/h2&gt; &lt;p&gt;As mentioned before, you don&amp;#8217;t do IoT just for the fun of it (well, maybe at home, with a Raspberry Pi, Node.js, OpenHAB, and mosquitto). But when you want to connect millions of devices with your cloud backend, you want to start working with that data. Using Hono gives you a pretty simple start. Everything you need is an AMQP 1.0 connectivity. Assuming you use Apache Camel, pushing telemetry data towards a Kafka cluster is as easy as (also see &lt;a href="https://github.com/ctron/hono-example-bridge" target="_blank" rel="noreferrer noopener" aria-label="ctron/hono-example-bridge (opens in a new tab)"&gt;ctron/hono-example-bridge&lt;/a&gt;):&lt;/p&gt; &lt;pre class="brush: xml; title: ; notranslate"&gt; &amp;#60;route id=&amp;#34;store&amp;#34;&amp;#62; &amp;#60;from uri=&amp;#34;amqp:telemetry/myapp.iot&amp;#34; /&amp;#62; &amp;#60;setHeader id=&amp;#34;setKafkaKey&amp;#34; headerName=&amp;#34;kafka.KEY&amp;#34;&amp;#62; &amp;#60;simple&amp;#62;${header[device_id]}&amp;#60;/simple&amp;#62; &amp;#60;/setHeader&amp;#62; &amp;#60;to uri=&amp;#34;kafka:telemetry?brokers={{kafka.brokers}}&amp;#34; /&amp;#62; &amp;#60;/route&amp;#62; &lt;/pre&gt; &lt;p&gt;Bringing together solutions like &lt;a href="https://www.redhat.com/en/technologies/jboss-middleware/fuse" target="_blank" rel="noopener noreferrer"&gt;Red Hat Fuse&lt;/a&gt;, &lt;a href="https://www.redhat.com/en/technologies/jboss-middleware/amq" target="_blank" rel="noopener noreferrer"&gt;AMQ&lt;/a&gt; and &lt;a href="https://www.redhat.com/en/technologies/jboss-middleware/decision-manager" target="_blank" rel="noopener noreferrer"&gt;Decision Manager&lt;/a&gt; makes it a lot easier to give your custom logic in the data center (your value add‑on) access to the Internet of Things.&lt;/p&gt; &lt;h2&gt;What&amp;#8217;s next?&lt;/h2&gt; &lt;p&gt;AMQ Online 1.1 is the first version to feature IoT as a tech preview. So, give it a try, play with it, but also keep in mind that it is a tech preview.&lt;/p&gt; &lt;p&gt;In the upstream project EnMasse, we are currently working on creating a scalable, general purpose device registry based on &lt;a href="https://infinispan.org/" target="_blank" rel="noopener noreferrer"&gt;Infinispan&lt;/a&gt;. Hono itself doesn&amp;#8217;t bring a device registry, it only defines the APIs it requires. However, we think it makes sense to provide a scalable device registry, out of the box, to get you started. In AMQ Online, that would then be supported by using &lt;a href="https://www.redhat.com/en/technologies/jboss-middleware/data-grid" target="_blank" rel="noopener noreferrer"&gt;Red Hat Data Grid&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;In the next months, we hope to also see the release of Eclipse Hono 1.0 and graduate the project from the incubation phase. This is a big step for a project at Eclipse but also the right thing to do. Eclipse Hono is ready, and graduating the project means that we will pay even closer attention to APIs and stability. Still, new features like LoRaWAN, maybe Sigfox, and a proper HTTP API definition for the device registry, are already under development.&lt;/p&gt; &lt;p&gt;So, there are lots of new features and enhancements that we hope to bring into AMQ Online 1.2.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F14%2Fbringing-iot-to-red-hat-amq-online%2F&amp;#38;linkname=Bringing%20IoT%20to%20Red%20Hat%20AMQ%20Online" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F14%2Fbringing-iot-to-red-hat-amq-online%2F&amp;#38;linkname=Bringing%20IoT%20to%20Red%20Hat%20AMQ%20Online" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F14%2Fbringing-iot-to-red-hat-amq-online%2F&amp;#38;linkname=Bringing%20IoT%20to%20Red%20Hat%20AMQ%20Online" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F14%2Fbringing-iot-to-red-hat-amq-online%2F&amp;#38;linkname=Bringing%20IoT%20to%20Red%20Hat%20AMQ%20Online" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F14%2Fbringing-iot-to-red-hat-amq-online%2F&amp;#38;linkname=Bringing%20IoT%20to%20Red%20Hat%20AMQ%20Online" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F14%2Fbringing-iot-to-red-hat-amq-online%2F&amp;#38;linkname=Bringing%20IoT%20to%20Red%20Hat%20AMQ%20Online" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F14%2Fbringing-iot-to-red-hat-amq-online%2F&amp;#38;linkname=Bringing%20IoT%20to%20Red%20Hat%20AMQ%20Online" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F14%2Fbringing-iot-to-red-hat-amq-online%2F&amp;#38;linkname=Bringing%20IoT%20to%20Red%20Hat%20AMQ%20Online" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F14%2Fbringing-iot-to-red-hat-amq-online%2F&amp;#038;title=Bringing%20IoT%20to%20Red%20Hat%20AMQ%20Online" data-a2a-url="https://developers.redhat.com/blog/2019/05/14/bringing-iot-to-red-hat-amq-online/" data-a2a-title="Bringing IoT to Red Hat AMQ Online"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/05/14/bringing-iot-to-red-hat-amq-online/"&gt;Bringing IoT to Red Hat AMQ Online&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/oLJRJwZ6too" height="1" width="1" alt=""/&gt;</content><summary>Red Hat AMQ Online 1.1 was recently announced, and I am excited about it because it contains a tech preview of our Internet of Things (IoT) support. AMQ Online is the “messaging as service solution” from Red Hat AMQ. Leveraging the work we did on Eclipse Hono allows us to integrate a scalable, cloud-native IoT personality into this general-purpose messaging layer. And the whole reason why you need...</summary><dc:creator>Jens Reimann</dc:creator><dc:date>2019-05-14T10:00:21Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/05/14/bringing-iot-to-red-hat-amq-online/</feedburner:origLink></entry><entry><title>Use the Kubernetes Python client from your running Red Hat OpenShift pods</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/vjguPIQn8So/" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="Python" scheme="searchisko:content:tags" /><author><name>Shane Boulden</name></author><id>searchisko:content:id:jbossorg_blog-use_the_kubernetes_python_client_from_your_running_red_hat_openshift_pods</id><updated>2019-05-14T10:00:07Z</updated><published>2019-05-14T10:00:07Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt; is part of the Cloud Native Computing Foundation (CNCF) &lt;a href="https://www.cncf.io/certification/software-conformance/#logos"&gt;Certified Program&lt;/a&gt;, ensuring portability and interoperability for your &lt;a href="https://developers.redhat.com/blog/category/containers/"&gt;container&lt;/a&gt; workloads. This also allows you to use &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt; tools to interact with an OpenShift cluster, like &lt;code&gt;kubectl&lt;/code&gt;, and you can rest assured that all the APIs you know and love are right there at your fingertips.&lt;/p&gt; &lt;p&gt;The Kubernetes &lt;a href="https://developers.redhat.com/blog/category/python/"&gt;Python&lt;/a&gt; client is another great tool for interacting with an OpenShift cluster, allowing you to perform actions on Kubernetes resources with Python code. It also has applications within a cluster. We can configure a Python application running on OpenShift to consume the OpenShift API, and list and create resources. We could then create containerized batch jobs from the running application, or a custom service monitor, for example. It sounds a bit like &amp;#8220;OpenShift inception,&amp;#8221; using the OpenShift API from services created using the OpenShift API.&lt;/p&gt; &lt;p&gt;In this article, we&amp;#8217;ll create a &lt;a href="https://developers.redhat.com/blog/2019/02/18/containerized-python-flask-development-environment-red-hat-codeready-workspaces/"&gt;Flask&lt;/a&gt; application running on OpenShift. This application will use the Kubernetes Python client to interact with the OpenShift API, list other pods in the project, and display them back to the user.&lt;span id="more-594107"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;You&amp;#8217;ll need a couple of things to follow along:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;An OpenShift cluster&lt;/li&gt; &lt;li&gt;A working knowledge of Python&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Let&amp;#8217;s get started!&lt;/p&gt; &lt;h2&gt;Setup&lt;/h2&gt; &lt;p&gt;I&amp;#8217;ve created a template to alleviate a lot of the boilerplate, so let&amp;#8217;s clone it down:&lt;/p&gt; &lt;pre&gt;git clone https://github.com/shaneboulden/openshift-client-demo cd openshift-client-demo &lt;/pre&gt; &lt;p&gt;You can create a new app on your OpenShift cluster using the provided template and see the application running:&lt;/p&gt; &lt;pre&gt;oc new-app openshift_deploy/ocd.yaml &lt;/pre&gt; &lt;p&gt;If you do an &lt;code&gt;oc get routes&lt;/code&gt;, you&amp;#8217;ll be able to see the route that&amp;#8217;s been created. For now, if you select the &lt;em&gt;Pods&lt;/em&gt; menu item you&amp;#8217;ll just get some placeholder text. We&amp;#8217;ll fix this shortly &lt;img src="https://s.w.org/images/core/emoji/11.2.0/72x72/1f642.png" alt="" class="wp-smiley" style="height: 1em; max-height: 1em;" /&gt;&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/05/Screenshot-from-2019-05-06-21-46-12.png"&gt;&lt;img class=" size-full wp-image-594537 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/05/Screenshot-from-2019-05-06-21-46-12.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/05/Screenshot-from-2019-05-06-21-46-12.png" alt="pods_placeholder" width="484" height="153" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/05/Screenshot-from-2019-05-06-21-46-12.png 484w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/Screenshot-from-2019-05-06-21-46-12-300x95.png 300w" sizes="(max-width: 484px) 100vw, 484px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;h2&gt;Configure the Kubernetes Python client&lt;/h2&gt; &lt;p&gt;Listing pods is trivial once we have our client configured, and, fortunately, we can use a little Kubernetes Python client magic to configure this easily with the correct service account token.&lt;/p&gt; &lt;p&gt;Usually, we&amp;#8217;d configure a Kubernetes client using a kubeconfig file, which has the required token and hostname to create API requests. The Kubernetes Python client also provides a method &lt;code&gt;load_incluster_config()&lt;/code&gt;, which replaces the kubeconfig file in a running pod, instead using the available environment variables and mount points to find the service account token and build API URLs from the information available within the pod.&lt;/p&gt; &lt;p&gt;There&amp;#8217;s another huge benefit to using &lt;code&gt;load_incluster_config()&lt;/code&gt;—our code is now portable. We can take this same application to any Kubernetes cluster, assume nothing about hostnames or network addresses, and easily construct API requests using this awesome little method.&lt;/p&gt; &lt;p&gt;Let&amp;#8217;s configure our application to use the &lt;code&gt;load_incluster_config()&lt;/code&gt; method. First, we need to import the client and config objects, you can verify this in the &lt;code&gt;ocd.py&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;from kubernetes import client, config &lt;/pre&gt; &lt;p&gt;We can now use that magic method to configure the client:&lt;/p&gt; &lt;pre&gt;config.load_incluster_config() v1 = client.CoreV1Api() &lt;/pre&gt; &lt;p&gt;That&amp;#8217;s it! This is all of the code we need to be able to interact with the OpenShift API from running pods.&lt;/p&gt; &lt;h2&gt;Use the Kubernetes Downward API&lt;/h2&gt; &lt;p&gt;I&amp;#8217;m going to introduce something new here, and yes, it&amp;#8217;s another &amp;#8220;OpenShift-inception&amp;#8221; concept. We&amp;#8217;re going to use the &lt;code&gt;list_namespaced_pod&lt;/code&gt; method to list pod details; you can find all of the methods available in the &lt;a href="https://github.com/kubernetes-client/python/blob/master/kubernetes/docs/CoreV1Api.md"&gt;documentation&lt;/a&gt;. To use this method, we need to pass the current namespace (project) to the Kubernetes client object. But wait, how do we get the namespace for our pod, from inside the running pod?&lt;/p&gt; &lt;p&gt;This is where another awesome Kubernetes API comes into play. It&amp;#8217;s called the &lt;a href="https://kubernetes.io/docs/tasks/inject-data-application/environment-variable-expose-pod-information/#the-downward-api"&gt;Downward API&lt;/a&gt; and allows us to access metadata about our pod from inside the running pod. To expose information from the Downward API to our pod, we can use environment variables. If you look at the template, you&amp;#8217;ll see the following in the &amp;#8216;env&amp;#8217; section:&lt;/p&gt; &lt;pre&gt;- name: POD_NAMESPACE valueFrom: fieldRef: apiVersion: v1 fieldPath: metadata.namespace &lt;/pre&gt; &lt;h2&gt;Bring it all together&lt;/h2&gt; &lt;p&gt;Now let&amp;#8217;s get back to our &lt;code&gt;/pods&lt;/code&gt; route in the &lt;code&gt;ocd.py&lt;/code&gt; file. The last thing we need to do is to pass the namespace of the app to the Kubernetes client. We have our environment variable configured to use the downward API already, so let&amp;#8217;s pass it in:&lt;/p&gt; &lt;pre&gt;pods = v1.list_namespaced_pod(namespace=os.environ["POD_NAMESPACE"]) &lt;/pre&gt; &lt;p&gt;Ensure you&amp;#8217;re in the top-level project directory (i.e., you can see the README) and start a build from the local directory:&lt;/p&gt; &lt;pre&gt;oc start-build openshift-client-demo --from-dir=. &lt;/pre&gt; &lt;p&gt;When you next visit the route and select the &lt;i&gt;Pods&lt;/i&gt; menu, you&amp;#8217;ll be able to see all of the pods for the current namespace:&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/05/Screenshot-from-2019-05-06-21-36-36.png"&gt;&lt;img class=" size-full wp-image-594507 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/05/Screenshot-from-2019-05-06-21-36-36-1024x390.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/05/Screenshot-from-2019-05-06-21-36-36-1024x390.png" alt="pods" width="640" height="244" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/05/Screenshot-from-2019-05-06-21-36-36-1024x390.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/Screenshot-from-2019-05-06-21-36-36-300x114.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/Screenshot-from-2019-05-06-21-36-36-768x293.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/Screenshot-from-2019-05-06-21-36-36.png 1231w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;I hope you&amp;#8217;ve enjoyed this short introduction to the Kubernetes Python client. If you want to explore a little deeper, you can look at creating resources. There&amp;#8217;s an example &lt;a href="https://github.com/peak-oss/peakorc/blob/master/peakorc/peakorc.py#L79"&gt;here&lt;/a&gt; that looks at creating containerized batch jobs from API POSTs.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F14%2Fuse-the-kubernetes-python-client-from-your-running-red-hat-openshift-pods%2F&amp;#38;linkname=Use%20the%20Kubernetes%20Python%20client%20from%20your%20running%20Red%20Hat%20OpenShift%20pods" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F14%2Fuse-the-kubernetes-python-client-from-your-running-red-hat-openshift-pods%2F&amp;#38;linkname=Use%20the%20Kubernetes%20Python%20client%20from%20your%20running%20Red%20Hat%20OpenShift%20pods" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F14%2Fuse-the-kubernetes-python-client-from-your-running-red-hat-openshift-pods%2F&amp;#38;linkname=Use%20the%20Kubernetes%20Python%20client%20from%20your%20running%20Red%20Hat%20OpenShift%20pods" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F14%2Fuse-the-kubernetes-python-client-from-your-running-red-hat-openshift-pods%2F&amp;#38;linkname=Use%20the%20Kubernetes%20Python%20client%20from%20your%20running%20Red%20Hat%20OpenShift%20pods" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F14%2Fuse-the-kubernetes-python-client-from-your-running-red-hat-openshift-pods%2F&amp;#38;linkname=Use%20the%20Kubernetes%20Python%20client%20from%20your%20running%20Red%20Hat%20OpenShift%20pods" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F14%2Fuse-the-kubernetes-python-client-from-your-running-red-hat-openshift-pods%2F&amp;#38;linkname=Use%20the%20Kubernetes%20Python%20client%20from%20your%20running%20Red%20Hat%20OpenShift%20pods" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F14%2Fuse-the-kubernetes-python-client-from-your-running-red-hat-openshift-pods%2F&amp;#38;linkname=Use%20the%20Kubernetes%20Python%20client%20from%20your%20running%20Red%20Hat%20OpenShift%20pods" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F14%2Fuse-the-kubernetes-python-client-from-your-running-red-hat-openshift-pods%2F&amp;#38;linkname=Use%20the%20Kubernetes%20Python%20client%20from%20your%20running%20Red%20Hat%20OpenShift%20pods" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F14%2Fuse-the-kubernetes-python-client-from-your-running-red-hat-openshift-pods%2F&amp;#038;title=Use%20the%20Kubernetes%20Python%20client%20from%20your%20running%20Red%20Hat%20OpenShift%20pods" data-a2a-url="https://developers.redhat.com/blog/2019/05/14/use-the-kubernetes-python-client-from-your-running-red-hat-openshift-pods/" data-a2a-title="Use the Kubernetes Python client from your running Red Hat OpenShift pods"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/05/14/use-the-kubernetes-python-client-from-your-running-red-hat-openshift-pods/"&gt;Use the Kubernetes Python client from your running Red Hat OpenShift pods&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/vjguPIQn8So" height="1" width="1" alt=""/&gt;</content><summary>Red Hat OpenShift is part of the Cloud Native Computing Foundation (CNCF) Certified Program, ensuring portability and interoperability for your container workloads. This also allows you to use Kubernetes tools to interact with an OpenShift cluster, like kubectl, and you can rest assured that all the APIs you know and love are right there at your fingertips. The Kubernetes Python client is another ...</summary><dc:creator>Shane Boulden</dc:creator><dc:date>2019-05-14T10:00:07Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/05/14/use-the-kubernetes-python-client-from-your-running-red-hat-openshift-pods/</feedburner:origLink></entry><entry><title>Building and understanding reactive microservices using Eclipse Vert.x and distributed tracing</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/_XM6A3PdUiQ/" /><category term="cloud" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="red hat summit" scheme="searchisko:content:tags" /><author><name>Tiffany Jachja</name></author><id>searchisko:content:id:jbossorg_blog-building_and_understanding_reactive_microservices_using_eclipse_vert_x_and_distributed_tracing</id><updated>2019-05-13T10:00:23Z</updated><published>2019-05-13T10:00:23Z</published><content type="html">&lt;p&gt;I recently had the opportunity to speak at &lt;a href="https://www.redhat.com/en/summit/2019"&gt;Red Hat Summit 2019&lt;/a&gt;. In my session, titled &amp;#8220;Vert.x application development with Jaeger distributed tracing,&amp;#8221; I discussed how scalable event-driven applications could be built with &lt;a href="https://developers.redhat.com/videos/youtube/mcbdnMDERX0/"&gt;Eclipse Vert.x,&lt;/a&gt; a &lt;a href="https://developers.redhat.com/topics/enterprise-java/"&gt;Java&lt;/a&gt; Virtual Machine toolkit for building reactive applications.&lt;/p&gt; &lt;p&gt;Thanks to many developer tools, creating these applications is no longer the most effort-consuming task in IT. Instead, we now have to understand how parts of our application function together to deliver a service, (across dev, test and production environments).  This can be difficult because, with distributed architectures, external monitoring only tells you the overall response time and the number of invocations, providing no insight into the individual operations. Additionally, log entries for a request are scattered across numerous logs. This article discusses the use of &lt;a href="https://vertx.io/"&gt;Eclipse Vert.x&lt;/a&gt;, distributed tracing, and &lt;a href="https://www.jaegertracing.io/"&gt;Jaeger&lt;/a&gt; in the context of this problem.&lt;span id="more-587827"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;As defined by the &lt;a href="https://www.reactivemanifesto.org/"&gt;Reactive Manifesto&lt;/a&gt;, reactive systems are elastic, resilient, responsive, and based on a message-driven design.&lt;/p&gt; &lt;p&gt;Eclipse Vert.x is an open source toolkit for building reactive systems and streams on the Java Virtual Machine. Vert.x is unopinionated and polyglot, which gives developers the freedom to use the toolkit as they see fit. The core components of Vert.x include its a&lt;span style="font-weight: 400;"&gt;ctors, which are called &lt;em&gt;Verticles&lt;/em&gt;&lt;strong&gt;, &lt;/strong&gt;a message bus, called an &lt;em&gt;Event Bus&lt;/em&gt;, and event dispatchers, known as &lt;em&gt;Eventloops&lt;/em&gt;.&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Eclipse Vert.x basics&lt;/h2&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Eclipse Vert.x implements a m&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;ulti-reactor pattern supported by eventloops. &lt;/span&gt;In a reactor pattern, there exists a stream of events delegated to handlers by a thread called an eventloop. Because the eventloop observes the stream of events and calls the handlers to handle the event, it is important to never block the eventloop. If handlers are not available to the eventloop, then the eventloop has to wait; so, we effectively call the eventloop blocked.&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone size-full wp-image-595577 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/05/pasted-image-0-1024x354.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/05/pasted-image-0.png" alt="" width="1223" height="423" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/05/pasted-image-0.png 1223w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/pasted-image-0-300x104.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/pasted-image-0-768x266.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/pasted-image-0-1024x354.png 1024w" sizes="(max-width: 1223px) 100vw, 1223px" /&gt;&lt;/p&gt; &lt;p&gt;In this pattern, a single eventloop on a multi-core machine has drawbacks, because a single thread cannot run on more than one CPU core at a time. For developers using technologies implementing the reactor pattern, this means having to manage and start up more processes with an eventloop in order to improve performance.&lt;/p&gt; &lt;p&gt;Eclipse Vert.x implements a multi-reactor pattern where, by default, each CPU core has two eventloops. This gives applications using Vert.x the responsiveness needed when the number of events increases.&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone size-full wp-image-595587 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/05/pasted-image-0-1-1024x457.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/05/pasted-image-0-1.png" alt="" width="1268" height="566" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/05/pasted-image-0-1.png 1268w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/pasted-image-0-1-300x134.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/pasted-image-0-1-768x343.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/pasted-image-0-1-1024x457.png 1024w" sizes="(max-width: 1268px) 100vw, 1268px" /&gt;&lt;/p&gt; &lt;p&gt;In the figure above, the handlers are verticles, which are the main actors in Vert.x. Verticles get assigned to a random eventloop at deploy time.&lt;/p&gt; &lt;p&gt;Another important concept is the e&lt;span style="font-weight: 400;"&gt;vent bus, which is how verticles can communicate with each other in a publish-subscribe manner. Verticles are registered to the event bus and given an address to listen on. The event bus allows verticles to be scaled, as we only need to specify what address a verticle listens for events on and where it should publish those events to.&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Observability&lt;/h2&gt; &lt;p&gt;Vert.x aids development of reactive &lt;a href="https://developers.redhat.com/topics/microservices/"&gt;microservices&lt;/a&gt;, but what about application observability? It is important in distributed landscapes that we can still observe requests being handled by the application. Consider an e-commerce application, for example. A single checkout request may be passed to tens or hundreds of services before the application is finished handling that process; whether in development or production environments, developer and support teams need tools to understand and debug issues that may arise within their services.&lt;/p&gt; &lt;p&gt;Tracing can provide the context surrounding the failure. Distributed tracing involves code instrumentation such that:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Each request has a unique external request id.&lt;/li&gt; &lt;li&gt;The external request id is passed to all services that are involved in handling the request.&lt;/li&gt; &lt;li&gt;The external request id is included in log messages.&lt;/li&gt; &lt;li&gt;Information (e.g., start time, end time) about the requests and operations performed are recorded when handling an external request in a centralized service.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This code instrumentation is provided by the &lt;a href="https://opentracing.io/guides"&gt;OpenTracing specification&lt;/a&gt;. Using the core concepts of distributed tracing we can use OpenTracing libraries to instrument our applications.&lt;/p&gt; &lt;p&gt;Application Performance Management (APM) tools, such as &lt;a href="https://www.cncf.io/"&gt;Cloud Native Computing Foundation&lt;/a&gt;&amp;#8216;s &lt;a href="https://www.cncf.io/project-faq/jaeger/"&gt;Jaeger,&lt;/a&gt; use &lt;a href="https://opentracing.io/docs/overview/"&gt;OpenTracing&lt;/a&gt; to provide additional features such as a user interface for users to interact with, below is an architecture diagram for using Jaeger.&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone size-full wp-image-595597 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/05/architecture-1024x550.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/05/architecture.png" alt="" width="2239" height="1202" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/05/architecture.png 2239w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/architecture-300x161.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/architecture-768x412.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/architecture-1024x550.png 1024w" sizes="(max-width: 2239px) 100vw, 2239px" /&gt;&lt;/p&gt; &lt;p&gt;The application&amp;#8217;s node contains the application and jaeger-client library. Once spans are finished, they are reported to the jaeger-agent, and the jaeger-collector interacts with database backends to store the reported traces to be queried when the user views the jaeger-ui. You can find more details about each Jaeger component &lt;a href="https://www.jaegertracing.io/docs/1.11/architecture/"&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Reactive event-driven architectures provide the advantages of responsiveness, resiliency, elasticity, and message passing. Yet as our applications expand and grow, it can become difficult to understand or even debug applications. The purpose of this article (and my presentation) was to share how Vert.x can be used to create reactive microservice applications and how distributed tracing can provide the ability to better work with such applications.&lt;/p&gt; &lt;p&gt;&lt;em&gt;This article is based on the &amp;#8220;Vert.x application development with Jaeger distributed tracing&amp;#8221; session presented by Tiffany Jachja at &lt;a href="https://www.redhat.com/en/summit/2019"&gt;Red Hat Summit 2019&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F13%2Fbuilding-and-understanding-reactive-microservices-using-eclipse-vert-x-and-distributed-tracing%2F&amp;#38;linkname=Building%20and%20understanding%20reactive%20microservices%20using%20Eclipse%20Vert.x%20and%20distributed%20tracing" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F13%2Fbuilding-and-understanding-reactive-microservices-using-eclipse-vert-x-and-distributed-tracing%2F&amp;#38;linkname=Building%20and%20understanding%20reactive%20microservices%20using%20Eclipse%20Vert.x%20and%20distributed%20tracing" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F13%2Fbuilding-and-understanding-reactive-microservices-using-eclipse-vert-x-and-distributed-tracing%2F&amp;#38;linkname=Building%20and%20understanding%20reactive%20microservices%20using%20Eclipse%20Vert.x%20and%20distributed%20tracing" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F13%2Fbuilding-and-understanding-reactive-microservices-using-eclipse-vert-x-and-distributed-tracing%2F&amp;#38;linkname=Building%20and%20understanding%20reactive%20microservices%20using%20Eclipse%20Vert.x%20and%20distributed%20tracing" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F13%2Fbuilding-and-understanding-reactive-microservices-using-eclipse-vert-x-and-distributed-tracing%2F&amp;#38;linkname=Building%20and%20understanding%20reactive%20microservices%20using%20Eclipse%20Vert.x%20and%20distributed%20tracing" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F13%2Fbuilding-and-understanding-reactive-microservices-using-eclipse-vert-x-and-distributed-tracing%2F&amp;#38;linkname=Building%20and%20understanding%20reactive%20microservices%20using%20Eclipse%20Vert.x%20and%20distributed%20tracing" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F13%2Fbuilding-and-understanding-reactive-microservices-using-eclipse-vert-x-and-distributed-tracing%2F&amp;#38;linkname=Building%20and%20understanding%20reactive%20microservices%20using%20Eclipse%20Vert.x%20and%20distributed%20tracing" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F13%2Fbuilding-and-understanding-reactive-microservices-using-eclipse-vert-x-and-distributed-tracing%2F&amp;#38;linkname=Building%20and%20understanding%20reactive%20microservices%20using%20Eclipse%20Vert.x%20and%20distributed%20tracing" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F13%2Fbuilding-and-understanding-reactive-microservices-using-eclipse-vert-x-and-distributed-tracing%2F&amp;#038;title=Building%20and%20understanding%20reactive%20microservices%20using%20Eclipse%20Vert.x%20and%20distributed%20tracing" data-a2a-url="https://developers.redhat.com/blog/2019/05/13/building-and-understanding-reactive-microservices-using-eclipse-vert-x-and-distributed-tracing/" data-a2a-title="Building and understanding reactive microservices using Eclipse Vert.x and distributed tracing"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/05/13/building-and-understanding-reactive-microservices-using-eclipse-vert-x-and-distributed-tracing/"&gt;Building and understanding reactive microservices using Eclipse Vert.x and distributed tracing&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/_XM6A3PdUiQ" height="1" width="1" alt=""/&gt;</content><summary>I recently had the opportunity to speak at Red Hat Summit 2019. In my session, titled “Vert.x application development with Jaeger distributed tracing,” I discussed how scalable event-driven applications could be built with Eclipse Vert.x, a Java Virtual Machine toolkit for building reactive applications. Thanks to many developer tools, creating these applications is no longer the most effort-consu...</summary><dc:creator>Tiffany Jachja</dc:creator><dc:date>2019-05-13T10:00:23Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/05/13/building-and-understanding-reactive-microservices-using-eclipse-vert-x-and-distributed-tracing/</feedburner:origLink></entry><entry><title>Migrating Java applications to Quarkus, Part 2: Before and after</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Y5lFIlG-1jQ/" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><author><name>Filippe Spolti</name></author><id>searchisko:content:id:jbossorg_blog-migrating_java_applications_to_quarkus_part_2_before_and_after</id><updated>2019-05-13T10:00:00Z</updated><published>2019-05-13T10:00:00Z</published><content type="html">&lt;p&gt;This article is a continuation of &lt;a href="https://developers.redhat.com/blog/2019/04/12/migrating-java-applications-to-quarkus-lessons-learned/"&gt;Migrating Java applications to Quarkus: Lessons learned&lt;/a&gt;, and here, I’ll make a comparison of performance metrics for building and running a &lt;a href="https://developers.redhat.com/index.php/topics/enterprise-java/"&gt;Java&lt;/a&gt; app before and after &lt;a href="https://developers.redhat.com/blog/2019/03/20/quarkus-0-12-0-released/"&gt;Quarkus&lt;/a&gt;. My goal here is to demonstrate how awesome Quarkus is and maybe help you decide to use Quarkus to build your cool microservices.&lt;br /&gt; &lt;span id="more-593787"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;To make the comparison, I’ll use the same application that was used in the previous article using Thorntail and Quarkus binaries. The comparison will be made based on the following metrics:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Time to build the whole project&lt;/li&gt; &lt;li&gt;UberJar size&lt;/li&gt; &lt;li&gt;Time spent to start the application for the first time&lt;/li&gt; &lt;li&gt;Average of memory usage&lt;/li&gt; &lt;li&gt;Average of CPU usage&lt;/li&gt; &lt;li&gt;Loaded classes and active threads&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The application will be tested in three different environments, which are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;My local dev environment &lt;ul&gt; &lt;li&gt;Lenovo t460s &lt;ul&gt; &lt;li&gt;Intel(R) Core(TM) i7-6600U&lt;/li&gt; &lt;li&gt;RAM 20G&lt;/li&gt; &lt;li&gt;SSD HD&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Rpi 3 B+, &lt;a href="https://www.raspberrypi.org/magpi/raspberry-pi-3bplus-specs-benchmarks/"&gt;specs&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Red Hat OpenShift v3.11&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The set of tests demonstrated here were all done on my local dev environment. To begin, let&amp;#8217;s build both versions and compare the time spent on the build process:&lt;/p&gt; &lt;h3&gt;Quarkus:&lt;/h3&gt; &lt;pre&gt;&lt;em&gt;spolti@t460s:~$ mvn clean package&lt;/em&gt; &lt;em&gt;...&lt;/em&gt; &lt;em&gt;[INFO] ------------------------------------------------------------------------&lt;/em&gt; &lt;em&gt;[INFO] BUILD SUCCESS&lt;/em&gt; &lt;em&gt;[INFO] ------------------------------------------------------------------------&lt;/em&gt; &lt;em&gt;[INFO] Total time:  01:01 min&lt;/em&gt;&lt;/pre&gt; &lt;h3&gt;&lt;b&gt;Thorntail&lt;/b&gt;&lt;span style="font-weight: 400;"&gt;:&lt;/span&gt;&lt;/h3&gt; &lt;pre&gt;&lt;em&gt;spolti@t460s:~$  mvn clean package&lt;/em&gt; &lt;em&gt;...&lt;/em&gt; &lt;em&gt;[INFO] ------------------------------------------------------------------------&lt;/em&gt; &lt;em&gt;[INFO] BUILD SUCCESS&lt;/em&gt; &lt;em&gt;[INFO] ------------------------------------------------------------------------&lt;/em&gt; &lt;em&gt;[INFO] Total time:  01:20 min&lt;/em&gt;&lt;/pre&gt; &lt;p&gt;The build times show Quarkus being 19 seconds faster than Thorntail, but the build time itself is not too important. Next, after both versions are built, let’s see its size:&lt;/p&gt; &lt;pre&gt;&lt;em&gt;spolti@t460s:~$ du -sh *&lt;/em&gt; &lt;em&gt;&lt;b&gt;201M&lt;/b&gt; rebot-telegram-bot-0.4-SNAPSHOT-thorntail.jar&lt;/em&gt; &lt;em&gt;&lt;b&gt;38M&lt;/b&gt; rebot-telegram-bot-1.0-SNAPSHOT-runner.jar&lt;/em&gt;&lt;/pre&gt; &lt;p&gt;Here we have a big difference, Thorntail produces an uber jar five times bigger than Quarkus.&lt;/p&gt; &lt;p&gt;The next comparison shows the time spent to start the app the first time; usually, it takes longer to compare it. The app will be stopped after all plugins are started, tested on my local dev environment and on RPI:&lt;/p&gt; &lt;h3&gt;Quarkus:&lt;/h3&gt; &lt;pre&gt;&lt;em&gt;spolti@t460s:~$ time java -jar &amp;#60;omitted parameters&amp;#62; rebot-telegram-bot-1.0-SNAPSHOT-runner.jar&lt;/em&gt; &lt;em&gt;&amp;#60;Startup logs&amp;#62;&lt;/em&gt; &lt;em&gt;&lt;b&gt;real&lt;/b&gt; &lt;b&gt;0m10.633s&lt;/b&gt;&lt;/em&gt; &lt;em&gt;user 0m15.888s&lt;/em&gt; &lt;em&gt;sys 0m0.621s&lt;/em&gt; &lt;i&gt;pi@raspberrypi:~ $ time java -jar  &amp;#60;omitted parameters&amp;#62; rebot-telegram-bot-1.0-SNAPSHOT-runner.jar&lt;/i&gt; &lt;i&gt;&amp;#60;Startup logs&amp;#62;&lt;/i&gt; &lt;b&gt;&lt;i&gt;real&lt;/i&gt;&lt;/b&gt; &lt;b&gt;&lt;i&gt;0m21.309s&lt;/i&gt;&lt;/b&gt; &lt;i&gt;user&lt;/i&gt; &lt;i&gt;&lt;span style="font-weight: 400;"&gt;0m24.968s&lt;/span&gt;&lt;/i&gt; &lt;i&gt;sys&lt;/i&gt; &lt;i&gt;&lt;span style="font-weight: 400;"&gt;0m1.050s&lt;/span&gt;&lt;/i&gt;&lt;/pre&gt; &lt;h3&gt;Thorntail:&lt;/h3&gt; &lt;pre&gt;&lt;i&gt;spolti@t460s:~$ time java -jar &amp;#60;omitted parameters&amp;#62; rebot-telegram-bot-0.4-SNAPSHOT-thorntail.jar&lt;/i&gt; &lt;i&gt;&amp;#60;Startup logs&amp;#62;&lt;/i&gt; &lt;b&gt;&lt;i&gt;real&lt;/i&gt;&lt;/b&gt; &lt;b&gt;&lt;i&gt;0m38.926s&lt;/i&gt;&lt;/b&gt; &lt;i&gt;user&lt;/i&gt; &lt;i&gt;1m24.489s&lt;/i&gt; &lt;i&gt;sys&lt;/i&gt; &lt;i&gt;0m3.008s&lt;/i&gt; pi@raspberrypi:~ $ time java -jar  &lt;i&gt;&amp;#60;omitted parameters&amp;#62; &lt;/i&gt; rebot-telegram-bot-0.4-SNAPSHOT-thorntail.jar &lt;i&gt;&amp;#60;Startup logs&amp;#62;&lt;/i&gt; &lt;b&gt;real&lt;/b&gt; &lt;b&gt;2m38.637s&lt;/b&gt; user 2m51.688s sys&amp;#60; 0m6.444s&lt;/pre&gt; &lt;p&gt;This, in my opinion, is one of the most important metrics, and one that helped me decide to try Quarkus. It shows an amazing 30 seconds faster than my previous version on my local environment and around 137 seconds faster on RPI. This app particularly takes a few seconds to start, because it has around 10 plugins that do some tasks during startup leading to delays. But, imagine that your microservice is composed with a few Rest endpoints; it could be started in less than 1 second.&lt;/p&gt; &lt;p&gt;For now, let’s see how the Java memory behaves. The graphics below show information collected for 10 minutes:&lt;/p&gt; &lt;h3&gt;Quarkus:&lt;/h3&gt; &lt;p&gt;&lt;img class=" alignleft wp-image-593857 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/05/quarkus-jvm.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/05/quarkus-jvm-300x250.png" alt="" width="300" height="250" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/05/quarkus-jvm-300x250.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/quarkus-jvm-768x640.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/quarkus-jvm.png 893w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;/p&gt; &lt;h3&gt;Thorntail:&lt;/h3&gt; &lt;p&gt;&lt;img class=" alignleft wp-image-593877 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/05/thorntail-jvm.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/05/thorntail-jvm-300x250.png" alt="" width="300" height="250" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/05/thorntail-jvm-300x250.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/thorntail-jvm-768x641.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/thorntail-jvm.png 894w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;/p&gt; &lt;p&gt;This comparison is very interesting, as we can see, Quarkus has the best numbers except for the threads. The difference is not too big, but the memory usage is a way larger than Thorntail, and the number of the loaded classes is a way bigger, less than the half. With that said, when targeting devices like RPI, Quarkus is a perfect fit because it consumes a very small portion of physical resources.&lt;/p&gt; &lt;p&gt;The next metrics were done using the container images created with Thorntail and Quarkus version running on Red Hat OpenShift:&lt;/p&gt; &lt;h3&gt;Quarkus:&lt;/h3&gt; &lt;p&gt;&lt;img class=" alignleft wp-image-593897 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/05/quarkus-openshift-1-1024x276.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/05/quarkus-openshift-1-300x81.png" alt="" width="300" height="81" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/05/quarkus-openshift-1-300x81.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/quarkus-openshift-1-768x207.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/quarkus-openshift-1-1024x276.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/quarkus-openshift-1.png 1075w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;/p&gt; &lt;h3&gt;Thorntail:&lt;/h3&gt; &lt;p&gt;&lt;img class=" alignleft wp-image-593907 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/05/thorntail-openshift-1-1024x272.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/05/thorntail-openshift-1-300x80.png" alt="" width="300" height="80" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/05/thorntail-openshift-1-300x80.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/thorntail-openshift-1-768x204.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/thorntail-openshift-1-1024x272.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/thorntail-openshift-1.png 1074w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;/p&gt; &lt;p&gt;On OpenShift, we can also see a considerable difference in memory usage, but notice that this value can be decreased by fine-tuning the JVM memory configurations. For this example, such fine-tuning was not done.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;My experience with migrating an old application running on Thorntail to Quarkus was very good, and so far,  I&amp;#8217;ve had only great results with the metrics. In my opinion, migration to Quarkus is a go; of course, there are dozens of different scenarios that I didn’t cover, but I believe that, in most scenarios, the migration can be done and great results can be achieved.&lt;/p&gt; &lt;p&gt;The following table compares all the results I found during my tests:&lt;/p&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;&lt;b&gt;Metric&lt;/b&gt;&lt;/td&gt; &lt;td&gt;&lt;b&gt;Quarkus&lt;/b&gt;&lt;/td&gt; &lt;td&gt;&lt;b&gt;Thorntail&lt;/b&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;b&gt;build time&lt;/b&gt;&lt;/td&gt; &lt;td&gt;01:01 min&lt;/td&gt; &lt;td&gt;01:20 min&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;b&gt;uber jar size&lt;/b&gt;&lt;/td&gt; &lt;td&gt;38M&lt;/td&gt; &lt;td&gt;201M&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;b&gt;startup time (local dev env)&lt;/b&gt;&lt;/td&gt; &lt;td&gt;0m10.633s&lt;/td&gt; &lt;td&gt;0m38.926s&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;b&gt;startup time (rpi)&lt;/b&gt;&lt;/td&gt; &lt;td&gt;0m21.309s&lt;/td&gt; &lt;td&gt;2m38.637s&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;b&gt;Heap Memory&lt;/b&gt;&lt;/td&gt; &lt;td&gt;~45M-~125M&lt;/td&gt; &lt;td&gt;~240M-~790M&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;b&gt;Threads&lt;/b&gt;&lt;/td&gt; &lt;td&gt;~43&lt;/td&gt; &lt;td&gt;~62&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;b&gt;Loaded Classes&lt;/b&gt;&lt;/td&gt; &lt;td&gt;~12.575&lt;/td&gt; &lt;td&gt;~26.744&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;b&gt;CPU Usage&lt;/b&gt;&lt;/td&gt; &lt;td&gt;~0.3&lt;/td&gt; &lt;td&gt;~0.6&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;I hope this article is helpful and encourages you perhaps to try Quarkus in your next project or when migrating an existing one. &lt;span style="font-weight: 400;"&gt;For the next article, I will share more interesting stuff, which I had to do to make the application run well with a native image. So, stay tuned for the next installment.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F13%2Fmigrating-java-applications-to-quarkus-part-2-before-and-after%2F&amp;#38;linkname=Migrating%20Java%20applications%20to%20Quarkus%2C%20Part%202%3A%20Before%20and%20after" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F13%2Fmigrating-java-applications-to-quarkus-part-2-before-and-after%2F&amp;#38;linkname=Migrating%20Java%20applications%20to%20Quarkus%2C%20Part%202%3A%20Before%20and%20after" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F13%2Fmigrating-java-applications-to-quarkus-part-2-before-and-after%2F&amp;#38;linkname=Migrating%20Java%20applications%20to%20Quarkus%2C%20Part%202%3A%20Before%20and%20after" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F13%2Fmigrating-java-applications-to-quarkus-part-2-before-and-after%2F&amp;#38;linkname=Migrating%20Java%20applications%20to%20Quarkus%2C%20Part%202%3A%20Before%20and%20after" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F13%2Fmigrating-java-applications-to-quarkus-part-2-before-and-after%2F&amp;#38;linkname=Migrating%20Java%20applications%20to%20Quarkus%2C%20Part%202%3A%20Before%20and%20after" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F13%2Fmigrating-java-applications-to-quarkus-part-2-before-and-after%2F&amp;#38;linkname=Migrating%20Java%20applications%20to%20Quarkus%2C%20Part%202%3A%20Before%20and%20after" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F13%2Fmigrating-java-applications-to-quarkus-part-2-before-and-after%2F&amp;#38;linkname=Migrating%20Java%20applications%20to%20Quarkus%2C%20Part%202%3A%20Before%20and%20after" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F13%2Fmigrating-java-applications-to-quarkus-part-2-before-and-after%2F&amp;#38;linkname=Migrating%20Java%20applications%20to%20Quarkus%2C%20Part%202%3A%20Before%20and%20after" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F05%2F13%2Fmigrating-java-applications-to-quarkus-part-2-before-and-after%2F&amp;#038;title=Migrating%20Java%20applications%20to%20Quarkus%2C%20Part%202%3A%20Before%20and%20after" data-a2a-url="https://developers.redhat.com/blog/2019/05/13/migrating-java-applications-to-quarkus-part-2-before-and-after/" data-a2a-title="Migrating Java applications to Quarkus, Part 2: Before and after"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/05/13/migrating-java-applications-to-quarkus-part-2-before-and-after/"&gt;Migrating Java applications to Quarkus, Part 2: Before and after&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Y5lFIlG-1jQ" height="1" width="1" alt=""/&gt;</content><summary>This article is a continuation of Migrating Java applications to Quarkus: Lessons learned, and here, I’ll make a comparison of performance metrics for building and running a Java app before and after Quarkus. My goal here is to demonstrate how awesome Quarkus is and maybe help you decide to use Quarkus to build your cool microservices. To make the comparison, I’ll use the same application that was...</summary><dc:creator>Filippe Spolti</dc:creator><dc:date>2019-05-13T10:00:00Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/05/13/migrating-java-applications-to-quarkus-part-2-before-and-after/</feedburner:origLink></entry><entry><title>Getting started with blockchain for Java developers</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/UUR9mV-LuCM/getting-started-with-blockchain-for.html" /><category term="Bitcoin" scheme="searchisko:content:tags" /><category term="Blockchain" scheme="searchisko:content:tags" /><category term="Ethereum" scheme="searchisko:content:tags" /><category term="feed_group_name_fusesource" scheme="searchisko:content:tags" /><category term="feed_name_ofbizian" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><author><name>Bilgin Ibryam</name></author><id>searchisko:content:id:jbossorg_blog-getting_started_with_blockchain_for_java_developers</id><updated>2019-05-13T09:45:14Z</updated><published>2019-05-13T09:45:00Z</published><content type="html">&lt;span style="font-family: inherit;"&gt;&lt;i&gt;Follow me on&lt;a class="markup--anchor markup--p-anchor" data-href="http://twitter.com/bibryam" href="http://twitter.com/bibryam" rel="noopener noopener" target="_blank"&gt; twitter&lt;/a&gt; for other posts in this space. This post was originally published on &lt;a href="https://opensource.com/article/19/4/blockchain-java-developers" target="_blank"&gt;Opensource.com&lt;/a&gt; under CC BY-SA 4.0. &lt;/i&gt;&lt;/span&gt;&lt;i&gt;If you prefer, read the same post on &lt;a href="https://hackernoon.com/getting-started-with-blockchain-for-java-developers-3e995a57cca2" target="_blank"&gt;Hacker Noon&lt;/a&gt;.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;Top technology prognosticators have listed &lt;a href="https://opensource.com/article/18/6/blockchain-guide-next-generation"&gt;blockchain&lt;/a&gt; among the top 10 emerging technologies with the potential to revolutionize our world in the next decade, which makes it well worth investing your time now to learn. If you are a developer with a Java background who wants to get up to speed on blockchain technology, this article will give you the basic information you need to get started.&lt;br /&gt;Blockchain is a huge space and at first it can be overwhelming to navigate. Blockchain is different from other software technologies as it has a parallel non-technical universe with a focus on speculations, scams, price volatility, trading, &lt;a href="https://en.wikipedia.org/wiki/Initial_coin_offering" target="_blank"&gt;ICOs&lt;/a&gt;, cryptocurrencies, Bitcoin maximalism, game theory, human greed, etc. Here we will ignore that side of blockchain completely and look at the technical aspects only.&lt;br /&gt;&lt;h3&gt;The theoretical minimum for blockchain&lt;/h3&gt;Regardless of the programing language, implementation details, there is a theoretical minimum about blockchain that you should be familiar with. Without this understanding, it is impossible to grasp the foundations, and build on. Based on my experience, the very minimum two technologies that must be understood are Bitcoin and Ethereum. It happens that both projects introduced something new in this space, both currently have the highest &lt;a href="https://en.wikipedia.org/wiki/Market_capitalization" target="_blank"&gt;market cap&lt;/a&gt;, and highest developer community, etc. Most other blockchain projects, whether they are public or private, permissionless or permissioned, are forks of Bitcoin or Ethereum, or build and improve their shortcomings in some ways by making certain trade-offs. Understanding these two projects is like taking networking, database theory, messaging, data structures and two programing language classes in the university. Understanding how these two blockchain technologies will open your mind for the blockchain universe.&lt;br /&gt;&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-bVdw5c5K6mQ/XKTht02u2XI/AAAAAAAAMfY/62vCb5p18LQVbhvE0_LASs3JMJGhjaRGgCK4BGAYYCw/s1600/Copy%2Bof%2BAntifragile%2Bextended%2B-%2BNew%2BPage.png" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" height="215" src="https://4.bp.blogspot.com/-bVdw5c5K6mQ/XKTht02u2XI/AAAAAAAAMfY/62vCb5p18LQVbhvE0_LASs3JMJGhjaRGgCK4BGAYYCw/s320/Copy%2Bof%2BAntifragile%2Bextended%2B-%2BNew%2BPage.png" width="320" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Tech books to start with blockchain&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&amp;nbsp;The two books I recommend for this purpose happen to be from the same author - &lt;a href="https://twitter.com/aantonop" target="_blank"&gt;Andreas M. Antonopoulos&lt;/a&gt;:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://www.amazon.co.uk/Mastering-Bitcoin-Unlocking-Digital-Cryptocurrencies/dp/1449374042" target="_blank"&gt;&lt;b&gt;Mastering Bitcoin&lt;/b&gt;&lt;/a&gt; is the most in depth, technical but still understandable and easy to read book I could find about Bitcoin. The tens of other books I checked on this topic were either mostly philosophical and non-technical.&lt;/li&gt;&lt;li&gt;On the Ethereum side, there are many more technical books, but I liked the level of detail in &lt;a href="https://www.amazon.co.uk/Mastering-Ethereum-Andreas-Antonopoulos/dp/1491971940" target="_blank"&gt;&lt;b&gt;Mastering Ethereum&lt;/b&gt;&lt;/a&gt; most.&lt;/li&gt;&lt;li&gt;&lt;b&gt;&lt;a href="https://www.manning.com/books/building-ethereum-dapps" target="_blank"&gt;Building Ethereum Dapps&lt;/a&gt;&lt;/b&gt; is another book I found very thorough and covering the Ethereum development very well.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Most popular Java based blockchain projects &lt;/h3&gt;If you are coming from a technical background, it makes sense to build on that knowledge and see what blockchain brings to the table. In the end, blockchain is a fully new technology, but a new combination of existing technologies with human behavior fueled by network effects.&lt;br /&gt;&lt;br /&gt;It is worth stating that the popular technologies such as Java, .Net, relational databases are not common in the blockchain space. This space is primarily dominated by C, Go, Rust on the server side, and JavaScript on the client side. But if you know Java, there are a few projects and components written in Java that can be used as a leveraged entry point to the blockchain space.&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;Assuming you read the above two books, and want to get your hands dirty, here are a few open source blockchain projects written in Java:&lt;br /&gt;&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-PGcgJiKkTG0/XNk8SnnB6gI/AAAAAAAAM0g/CfEWUWLHFZUszwOnW2mrjKm9wUhZVbRsgCLcBGAs/s1600/1*ssx47qR6-qebWq43BSdVYA.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" data-original-height="880" data-original-width="1600" height="176" src="https://1.bp.blogspot.com/-PGcgJiKkTG0/XNk8SnnB6gI/AAAAAAAAM0g/CfEWUWLHFZUszwOnW2mrjKm9wUhZVbRsgCLcBGAs/s320/1*ssx47qR6-qebWq43BSdVYA.png" width="320" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Popular Java-based blockchain projects&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;&lt;a href="https://github.com/corda/corda" target="_blank"&gt;Corda&lt;/a&gt;&lt;/b&gt; - this is probably the most natural starting point for a Java developer. Corda is JVM based project that builds on top of popular widely used Java projects such as Apache Artemis, Hibernate, Apache Shiro, Jackson, and relational databases. It is inspired by Bitcoin, but has elements of business processes, messaging, and other familiar concepts. Check out my first impressions from it as a Java developer &lt;a href="https://medium.com/coinmonks/a-java-developers-first-impressions-from-corda-a5e3d6ce6e44" target="_blank"&gt;here&lt;/a&gt;. &lt;/li&gt;&lt;li&gt;&lt;b&gt;&lt;a href="https://github.com/PegaSysEng/pantheon" target="_blank"&gt;Pantheon&lt;/a&gt;&lt;/b&gt; - is a full implementation of an Ethereum node in Java. It is specifically created to attract developers from the Java ecosystem into the blockchain world. Here is an &lt;a href="https://slideslive.com/38911752/introducing-pantheon-a-mainnet-java-client-demo-roadmap" target="_blank"&gt;intro&lt;/a&gt; and a &lt;a href="https://www.youtube.com/watch?v=OKWBr94J9rY&amp;amp;amp=&amp;amp;feature=youtu.be&amp;amp;utm_source=Registered+for+Webinar+1&amp;amp;utm_campaign=c69f56e161-EMAIL_CAMPAIGN_2018_12_19_03_54&amp;amp;utm_medium=email&amp;amp;utm_term=0_d3baeca38b-c69f56e161-67110601" target="_blank"&gt;getting started&lt;/a&gt; video by its creators.&lt;/li&gt;&lt;li&gt;&lt;b&gt;&lt;a href="https://github.com/bitcoinj/bitcoinj" target="_blank"&gt;BitcoinJ&lt;/a&gt;&lt;/b&gt; - is the most popular Java implementation of the Bitcoin protocol. If you prefer to start with Bitcoin directly, this is the Java project to explore.&lt;/li&gt;&lt;li&gt;&lt;b&gt;&lt;a href="https://github.com/web3j/web3j" target="_blank"&gt;Web3J&lt;/a&gt;&lt;/b&gt; - while Corda, Pantheon are examples of a full blockchain node implemented in Java, Web3J is client library written in Java. It is very &lt;a href="https://web3j.io/" target="_blank"&gt;well documented&lt;/a&gt; and active project that makes talking to Ethereum compatible nodes straight forward. I created a &lt;a href="http://camel.apache.org/" target="_blank"&gt;Apache Camel&lt;/a&gt; connector for it and wrote about it &lt;a href="https://medium.com/@bibryam/enterprise-integration-for-ethereum-fa67a1577d43" target="_blank"&gt;here&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;&lt;b&gt;&lt;a href="https://github.com/hyperledger/fabric-sdk-java" target="_blank"&gt;Hyperledger Fabric Java SDK&lt;/a&gt;&lt;/b&gt; - one of the most popular enterprise blockchain projects is &lt;a href="https://www.hyperledger.org/projects/fabric" target="_blank"&gt;Hyperledger Fabric&lt;/a&gt; and it has a full-featured Java SDK to play with. &lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;&lt;a href="https://github.com/fundrequest/" target="_blank"&gt;FundRequest&lt;/a&gt;&lt;/b&gt; - I also want to point you to full end user applications written in Java. While the above projects are examples of clients or nodes, FundRequest is an open source funding platform implemented on top of Ethereum network and fully written in Java. It gives a good idea how to implement a complete blockchains project interacting with the Ethereum network.&lt;/li&gt;&lt;li&gt;&lt;b&gt;&lt;a href="https://medium.com/quiknode/ethereum-events-monitoring-using-eventeum-f81695d92e05" target="_blank"&gt;Eventum&lt;/a&gt;&lt;/b&gt; - this is a Java project that can help you monitor the Ethereum network and store Events on Kafka. It addresses a few of the common challenges when integrating with blockchain networks which are decentralized.&lt;/li&gt;&lt;/ul&gt;If you are still not sure where to start, I suggest you read Mastering Bitcoin, that will give you the solid foundation. If you like touching technology before reading, go to Github and play with one of the projects listed above. The rest will follow. The future is &lt;a href="https://opensource.com/article/18/8/open-source-tokenomics" target="_blank"&gt;open&lt;/a&gt; and &lt;a href="https://techcrunch.com/2019/02/05/blockchain-as-integration-evolution/" target="_blank"&gt;decentralized&lt;/a&gt;.&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/UUR9mV-LuCM" height="1" width="1" alt=""/&gt;</content><summary>Follow me on twitter for other posts in this space. This post was originally published on Opensource.com under CC BY-SA 4.0. If you prefer, read the same post on Hacker Noon. Top technology prognosticators have listed blockchain among the top 10 emerging technologies with the potential to revolutionize our world in the next decade, which makes it well worth investing your time now to learn. If you...</summary><dc:creator>Bilgin Ibryam</dc:creator><dc:date>2019-05-13T09:45:00Z</dc:date><feedburner:origLink>http://www.ofbizian.com/2019/05/getting-started-with-blockchain-for.html</feedburner:origLink></entry><entry><title>Red Hat Summit 2019 - 3 Pitfalls Everyone Should Avoid with Microservices</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/jBIUkO53Rt4/redhat-summit-2019-3-pitfalls-microservices.html" /><category term="cloud" scheme="searchisko:content:tags" /><category term="conference" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="FUSE" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-red_hat_summit_2019_3_pitfalls_everyone_should_avoid_with_microservices</id><updated>2019-05-13T12:11:10Z</updated><published>2019-05-13T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;a href="https://4.bp.blogspot.com/-mOrfuTEZirM/XNlXiLc0x5I/AAAAAAAAtpo/3WM3V66gMHAH9IYTOWjqkWec9ddWrX9OgCLcBGAs/s1600/IMG_0915.JPG" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img alt="red hat summit 2018" border="0" data-original-height="1200" data-original-width="1600" height="150" src="https://4.bp.blogspot.com/-mOrfuTEZirM/XNlXiLc0x5I/AAAAAAAAtpo/3WM3V66gMHAH9IYTOWjqkWec9ddWrX9OgCLcBGAs/s200/IMG_0915.JPG" title="" width="200" /&gt;&lt;/a&gt;&lt;a href="https://www.schabell.org/2018/11/red-hat-summit-2019-submitting-pitfalls-storytelling-career-planning.html" target="_blank"&gt;Previously I mentioned&lt;/a&gt;&amp;nbsp;that I'd submitted together with colleagues sessions on a diverse range of topics for Red Hat Summit 2019.&lt;br /&gt;&lt;br /&gt;Early this year &lt;a href="https://www.schabell.org/2019/02/red-hat-summit-2019-new-microservices-pitfalls.html" target="_blank"&gt;we heard back&lt;/a&gt; about one session being accepted.&lt;br /&gt;&lt;br /&gt;Last week we spent an hour with around fifty of our closest microservices friends debating many of the pitfalls everyone should avoid with microservices, and it was a lot of fun!&lt;br /&gt;&lt;br /&gt;Before we talk about the session, some background.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;div style="text-align: right;"&gt;&lt;/div&gt;&lt;a href="https://4.bp.blogspot.com/-2oui0vTB0W4/XNlXuactUUI/AAAAAAAAtps/ZCI3WmiP7pEc7Xbnt79wplUkb--Ktup9wCLcBGAs/s1600/BY2Me4hMQKyoD8XpLsEFSw.jpg" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="red hat summit 2018" border="0" data-original-height="1200" data-original-width="1600" height="240" src="https://4.bp.blogspot.com/-2oui0vTB0W4/XNlXuactUUI/AAAAAAAAtps/ZCI3WmiP7pEc7Xbnt79wplUkb--Ktup9wCLcBGAs/s320/BY2Me4hMQKyoD8XpLsEFSw.jpg" title="" width="320" /&gt;&lt;/a&gt;Last year with my good friend&amp;nbsp;&lt;a href="https://twitter.com/roelhodzelmans?lang=en" target="_blank"&gt;Roel Hodzelmans&lt;/a&gt;, we presented session that was pretty popular and ended up in the top 10% of all Red Hat Summit 2018.&amp;nbsp; The rest of 2018 we spent our time touring various venues, conferences, customers and partners to share the story behind&amp;nbsp;&lt;i&gt;3 pitfalls everyone should avoid with hybrid multicloud&lt;/i&gt;. Attendees everywhere asked us if there were more pitfalls and we have listened.&lt;br /&gt;&lt;br /&gt;While the follow up session on this hybrid multicloud talk did not get accepted, we'll be sharing our pitfalls insights around customers efforts with microservices.&lt;br /&gt;&lt;br /&gt;It was rather nice to have a few attendees approach us both before and after about how they attended our session last year. They searched the agenda for Summit this year specifically looking for anything related to the theme '3 pitfalls...'&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-fvsSu742tX4/XNld5F-vo2I/AAAAAAAAtp8/dCJ4Taj_M80TIrJi1Xua7Kb0IqGxEytMACLcBGAs/s1600/EdzPU4lWT4Oxia9%2525tVn%252BSg.jpg" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="red hat summit 2018" border="0" data-original-height="1200" data-original-width="1600" height="240" src="https://4.bp.blogspot.com/-fvsSu742tX4/XNld5F-vo2I/AAAAAAAAtp8/dCJ4Taj_M80TIrJi1Xua7Kb0IqGxEytMACLcBGAs/s320/EdzPU4lWT4Oxia9%2525tVn%252BSg.jpg" title="" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;The format was in a room built for discussion, so when we set up the room we posted a white board by the door with an ask of our attendees. You needed to sit on the right or left based on having microservices running in production, or not. This request generated a few laughs, but it immediately changed the atmosphere from coming to listen, to having experience on one side teaching the curious on the other side.&lt;br /&gt;&lt;br /&gt;The session followed a set of slides containing our controversial opinions in the form of statements that were put forth to the room for comments. Each one opened up active and enthusiastic discussions, often based on one side having gone through the pain to production delivery and the other side asking their questions as they now work towards their microservice solutions.&lt;br /&gt;&lt;br /&gt;Below the slides:&lt;br /&gt;&lt;br /&gt;&lt;div align="center"&gt;&lt;iframe allowfullscreen="" frameborder="0" height="485" marginheight="0" marginwidth="0" scrolling="no" src="//www.slideshare.net/slideshow/embed_code/key/rpU9IqFxtkFkZK" style="border-width: 1px; border: 1px solid #ccc; margin-bottom: 5px; max-width: 100%;" width="595"&gt; &lt;/iframe&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;The reactions after the session indicate we're on the right track with our pitfalls, as many were based on our customer interactions over the years.&lt;br /&gt;&lt;br /&gt;Below the session abstract for your reference:&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;3 Pitfalls Everyone Should Avoid with Microservices&lt;/h3&gt;&lt;a href="https://2.bp.blogspot.com/-O-_mBjtmODQ/W-7UxnwOf0I/AAAAAAAAtTE/e05cMSQ8UfMqydnPwy1UxbNHYn5-4cNMgCLcBGAs/s1600/Screenshot%2B2018-11-16%2Bat%2B15.31.16.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img border="0" data-original-height="281" data-original-width="866" height="64" src="https://2.bp.blogspot.com/-O-_mBjtmODQ/W-7UxnwOf0I/AAAAAAAAtTE/e05cMSQ8UfMqydnPwy1UxbNHYn5-4cNMgCLcBGAs/s200/Screenshot%2B2018-11-16%2Bat%2B15.31.16.png" width="200" /&gt;&lt;/a&gt;&lt;i&gt;The daily hype is all around you. Microservices are a necessary step along the path to integration for a digitally successful future for your organization. The choices you’ve got to make don’t preclude the daily work of enhancing your customer’s experiences. From containers, cloud, multicloud, and beyond, microservices are the core infrastructure ensuring your organization's&amp;nbsp;flexibility in the digital world. Join us for an hour of power, where real customer experiences are used to highlight the three top lessons as they transitioned their integration infrastructure into modern day microservices.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;Thanks so much for joining us and hope you enjoyed our session.&lt;br /&gt;&lt;br /&gt;Feel free to reach out if you'd like to have one of us stop by and talk with your teams about pitfalls and microservices (just use the contact form on this site).&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=xj7q78vWvGs:1d3Dx5ZYlF8:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=xj7q78vWvGs:1d3Dx5ZYlF8:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=xj7q78vWvGs:1d3Dx5ZYlF8:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=xj7q78vWvGs:1d3Dx5ZYlF8:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=xj7q78vWvGs:1d3Dx5ZYlF8:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=xj7q78vWvGs:1d3Dx5ZYlF8:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=xj7q78vWvGs:1d3Dx5ZYlF8:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=xj7q78vWvGs:1d3Dx5ZYlF8:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=xj7q78vWvGs:1d3Dx5ZYlF8:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=xj7q78vWvGs:1d3Dx5ZYlF8:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=xj7q78vWvGs:1d3Dx5ZYlF8:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/xj7q78vWvGs" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/jBIUkO53Rt4" height="1" width="1" alt=""/&gt;</content><summary>Previously I mentioned that I'd submitted together with colleagues sessions on a diverse range of topics for Red Hat Summit 2019. Early this year we heard back about one session being accepted. Last week we spent an hour with around fifty of our closest microservices friends debating many of the pitfalls everyone should avoid with microservices, and it was a lot of fun! Before we talk about the se...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2019-05-13T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/xj7q78vWvGs/redhat-summit-2019-3-pitfalls-microservices.html</feedburner:origLink></entry></feed>
